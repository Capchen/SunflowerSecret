import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,f as e,d as p}from"./app-c6a1fa69.js";const t={},o=p(`<h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h3><blockquote><p>可以根据逻辑结构和物理结构来区分</p></blockquote><ul><li><p>按照逻辑结构</p><pre><code>1. 线性数据结构： 数组、链表、栈、队列、哈希表&lt;br /&gt;      2.非线形数据结构：树、图、堆、哈希表
</code></pre></li><li><p>按照物理结构（在计算机内存中的存储方式）</p></li></ul><ol><li>连续空间存储</li><li>离散空间存储</li></ol><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><blockquote><p>将相同类型元素存储在连续内存空间的数据结构，为什么数组的索引从0开始？因为索引本质上表示的是内存地址的偏移量，首个地址的偏移量是0，所以索引自然为0</p></blockquote><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ul><li>快速查找，直接访问对应索引元素</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><ul><li>插入和删除的效率比较低（插入的时候需要后挪，删除的时候需要前移，时间复杂度O(N））</li></ul><h3 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h3><blockquote><p>一种线形数据结构，由一个个节点连接。节点中包含包含：当前节点的值value和指向下一个节点的地址next</p></blockquote><h4 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1" aria-hidden="true">#</a> 优点</h4><ul><li>插入和删除的效率高，只需要改变原来一个节点的指针</li></ul><h4 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1" aria-hidden="true">#</a> 缺点</h4><ul><li>访问节点的效率低，不能直接访问想要的节点，只能通过前置节点才能知道下一个节点</li><li>内存占用多，因为一个节点的内容除了包含值还有下个节点的饮用地址</li></ul><p>尾节点的next字段值为null</p><h4 id="链表类型" tabindex="-1"><a class="header-anchor" href="#链表类型" aria-hidden="true">#</a> 链表类型</h4><ol><li>单向链表</li><li>环形链表</li><li>双向链表</li></ol><h3 id="栈" tabindex="-1"><a class="header-anchor" href="#栈" aria-hidden="true">#</a> 栈</h3><blockquote><p>先进后出，叠在一起的盘子，要拿最低下的盘子，需要把上面的盘子一个个拿走</p></blockquote><p><code>javascript</code>可以使用数组模拟栈操作，也可以使用链表</p><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h3><blockquote><p>先进先出</p></blockquote><p><code>javascript</code>可以使用数组模拟栈操作，也可以使用链表</p><h4 id="队列类型" tabindex="-1"><a class="header-anchor" href="#队列类型" aria-hidden="true">#</a> 队列类型</h4><ul><li>双向队列，两端都可以添加和删除元素</li></ul><h3 id="哈希表-hashmap" tabindex="-1"><a class="header-anchor" href="#哈希表-hashmap" aria-hidden="true">#</a> 哈希表(HashMap)</h3><blockquote><p>哈希表通过键值之前的映射，实现高效的元素查找。时间复杂度0(1),在<code>js</code>中可以使用Map类型来实现<br> 避免hash冲突可以是用Symbol来指定唯一key</p></blockquote><h3 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h3><blockquote><p>二叉树是一种非线性数据结构，表示祖先与后代之间的派生关系，体现一分为二的分治逻辑。类似于链表，二叉树也是节点关联。节点包含一个值，两个指针，左指针和右指针</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 初始化二叉树 */</span>
<span class="token comment">// 初始化结点</span>
<span class="token keyword">let</span> n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    n4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    n5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 构建引用指向（即指针）</span>
n1<span class="token punctuation">.</span>left <span class="token operator">=</span> n2<span class="token punctuation">;</span>
n1<span class="token punctuation">.</span>right <span class="token operator">=</span> n3<span class="token punctuation">;</span>
n2<span class="token punctuation">.</span>left <span class="token operator">=</span> n4<span class="token punctuation">;</span>
n2<span class="token punctuation">.</span>right <span class="token operator">=</span> n5<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="完美二叉树" tabindex="-1"><a class="header-anchor" href="#完美二叉树" aria-hidden="true">#</a> 完美二叉树</h4><p>所有的节点都被填满，所有节点的度为2</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/297368/1673599957981-dd5ebabd-dc47-4354-9585-9bb7a7a0987f.png#averageHue=%23fcfcfc&amp;clientId=u0140c98f-87b6-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=ui&amp;height=421&amp;id=uc32e59ad&amp;margin=[object Object]&amp;name=perfect_binary_tree.png&amp;originHeight=720&amp;originWidth=1280&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=65603&amp;status=done&amp;style=none&amp;taskId=ufbc03126-fd63-48cd-9467-678d1542e3b&amp;title=&amp;width=748" alt="perfect_binary_tree.png" tabindex="0" loading="lazy"><figcaption>perfect_binary_tree.png</figcaption></figure><h4 id="完全二叉树" tabindex="-1"><a class="header-anchor" href="#完全二叉树" aria-hidden="true">#</a> 完全二叉树</h4><p>只有最底层的节点没有被填满，且最底层节点尽量靠左填充</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/297368/1673599986964-bee60a94-8066-425b-b4a7-5b27faa77e35.png#averageHue=%23fcfcfc&amp;clientId=u0140c98f-87b6-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=ui&amp;id=u9ff4532f&amp;margin=[object Object]&amp;name=complete_binary_tree.png&amp;originHeight=720&amp;originWidth=1280&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=56261&amp;status=done&amp;style=none&amp;taskId=u016e14ce-9b65-4cd5-9d31-168accc43e8&amp;title=" alt="complete_binary_tree.png" tabindex="0" loading="lazy"><figcaption>complete_binary_tree.png</figcaption></figure><h4 id="完满二叉树" tabindex="-1"><a class="header-anchor" href="#完满二叉树" aria-hidden="true">#</a> 完满二叉树</h4><p>除了叶结点之外，其余所有的节点都有两个子节点</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/297368/1673600134537-41e2ee79-8d19-41e3-a6ec-11a7886ffd6d.png#averageHue=%23fdfdfd&amp;clientId=u0140c98f-87b6-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=ui&amp;id=u5e1654b3&amp;margin=[object Object]&amp;name=full_binary_tree.png&amp;originHeight=720&amp;originWidth=1280&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50414&amp;status=done&amp;style=none&amp;taskId=u72b2150c-d4e4-41f8-9858-5f5444558c4&amp;title=" alt="full_binary_tree.png" tabindex="0" loading="lazy"><figcaption>full_binary_tree.png</figcaption></figure><h4 id="平衡二叉树" tabindex="-1"><a class="header-anchor" href="#平衡二叉树" aria-hidden="true">#</a> 平衡二叉树</h4><p>任意节点的左子树和右子树的高度之差绝对值 <img src="https://cdn.nlark.com/yuque/__latex/0fc7b821521f1860f7e5cd7b8d1de90a.svg#card=math&amp;code=≤ 1&amp;id=UpfLg" alt="" loading="lazy"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/297368/1673600405243-c786c52d-c6ee-4f45-bb70-76bbc42ff9ae.png#averageHue=%23fbfbfb&amp;clientId=u0140c98f-87b6-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=ui&amp;id=ue20bb64d&amp;margin=[object Object]&amp;name=balanced_binary_tree.png&amp;originHeight=720&amp;originWidth=1280&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63985&amp;status=done&amp;style=none&amp;taskId=u2baf4d36-2183-4326-9791-503870f2f83&amp;title=" alt="balanced_binary_tree.png" loading="lazy"><br><a name="HEuSg"></a></p><h4 id="层序遍历-广度优先" tabindex="-1"><a class="header-anchor" href="#层序遍历-广度优先" aria-hidden="true">#</a> 层序遍历（广度优先）</h4><p>从上到下，从左到右</p><p><a name="bciuI"></a></p><h4 id="前序-中序-后序-深度优先" tabindex="-1"><a class="header-anchor" href="#前序-中序-后序-深度优先" aria-hidden="true">#</a> 前序/中序/后序（深度优先）</h4><p>其体现着一种：先走到头，再回头继续的遍历方式</p><ul><li>前序访问： // 访问优先级：根结点 -&gt; 左子树 -&gt; 右子树</li><li>中序访问： // 访问优先级：左子树 -&gt; 根结点 -&gt; 右子树</li><li>后序访问： // 访问优先级：左子树 -&gt; 右子树 -&gt; 根结点</li></ul><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/297368/1673600801905-58a2a830-92bc-4a60-ab44-d070cd98e9bd.png#averageHue=%23fcfbfa&amp;clientId=u0140c98f-87b6-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=ui&amp;id=u36dffa4a&amp;margin=[object Object]&amp;name=binary_tree_dfs.png&amp;originHeight=720&amp;originWidth=1280&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=174973&amp;status=done&amp;style=none&amp;taskId=ub495513e-404d-4aae-afc6-d7f0f187cfc&amp;title=" alt="binary_tree_dfs.png" tabindex="0" loading="lazy"><figcaption>binary_tree_dfs.png</figcaption></figure><p><a name="uDyFB"></a></p><h4 id="二叉搜索树" tabindex="-1"><a class="header-anchor" href="#二叉搜索树" aria-hidden="true">#</a> 二叉搜索树</h4><p>二叉搜索树需要满足：</p><ol><li>对于根节点，左子树中所有的节点的值 &lt; 根节点的值 &lt; 右子树所有的节点值</li><li>任意节点的左子树和右子树也是满足条件1，即也是二叉搜索树</li></ol><p>对于以上，可以想到先排序，然后二分</p><p><a name="ebjek"></a></p><h4 id="avl树" tabindex="-1"><a class="header-anchor" href="#avl树" aria-hidden="true">#</a> AVL树</h4><blockquote><p>AVL 树的独特之处在于「旋转 Rotation」的操作，其可 <strong>在不影响二叉树中序遍历序列的前提下，使失衡结点重新恢复平衡</strong>。换言之，旋转操作既可以使树保持为「二叉搜索树」，也可以使树重新恢复为「平衡二叉树」。</p></blockquote><p><a name="Rq5nS"></a></p><h4 id="堆" tabindex="-1"><a class="header-anchor" href="#堆" aria-hidden="true">#</a> 堆</h4><p>一颗限定条件下的「完全二叉树」。<br>根据成立条件：</p><ul><li>Max Heap 大顶堆： 任意节点的值 ≥ 其子节点的值</li><li>Min Heap 小顶堆： 任意节点的值 ≤ 其子节点的值</li></ul><p><a name="CY4t2"></a></p><h3 id="查找算法" tabindex="-1"><a class="header-anchor" href="#查找算法" aria-hidden="true">#</a> 查找算法</h3><p><a name="ubcVi"></a></p><h4 id="线形查找" tabindex="-1"><a class="header-anchor" href="#线形查找" aria-hidden="true">#</a> 线形查找</h4><p>遍历数据结构+判断是否命中<br>时间复杂度： O(n)<br>空间复杂度： O(1)<br><a name="KRheu"></a></p><h5 id="优点-2" tabindex="-1"><a class="header-anchor" href="#优点-2" aria-hidden="true">#</a> 优点</h5><ul><li>线形查找通用性极佳：没有跳跃访问的元素，数组和链表都可以<br><a name="GJJbQ"></a></li></ul><h5 id="缺点-2" tabindex="-1"><a class="header-anchor" href="#缺点-2" aria-hidden="true">#</a> 缺点</h5><ul><li>线形查找的时间复杂度太高，n足够大时，查找销量低<br><a name="sdhK5"></a></li></ul><h4 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找" aria-hidden="true">#</a> 二分查找</h4><p>利用数据的有序性，通过每轮缩小一半的搜索区间来查找<br>使用二分法的两个前置条件：</p><ul><li>数据必须有序性</li><li>仅适用于数组，因为在循环的过程中需要跳跃</li></ul><blockquote><p>如果为了满足数据有序性，去做数据的排序，是得不偿失。排序算法的时间复杂度一般为O(nlogn)</p></blockquote><p><a name="eQymW"></a></p><h5 id="优点-3" tabindex="-1"><a class="header-anchor" href="#优点-3" aria-hidden="true">#</a> 优点</h5><ul><li>时间复杂度低</li><li>不需要额外的空间<br><a name="iIN6s"></a></li></ul><h5 id="缺点-3" tabindex="-1"><a class="header-anchor" href="#缺点-3" aria-hidden="true">#</a> 缺点</h5><ul><li>仅适用于有序数据</li><li>仅适用于数组</li><li>在小数据量情况下，线形查找的性能更好<br><a name="hy6tC"></a></li></ul><h4 id="hash查找" tabindex="-1"><a class="header-anchor" href="#hash查找" aria-hidden="true">#</a> hash查找</h4><p>借助一个哈希数据结构，根据键值对的映射，实现O(1)的查找，以空间换时间<br>在<code>js</code>中使用Map类型<br><a name="aBAb6"></a></p><h5 id="优点-4" tabindex="-1"><a class="header-anchor" href="#优点-4" aria-hidden="true">#</a> 优点</h5><ul><li>查找、插入、删除操作的平均时间复杂度都为 O(1)<br><a name="OTUOw"></a></li></ul><h5 id="缺点-4" tabindex="-1"><a class="header-anchor" href="#缺点-4" aria-hidden="true">#</a> 缺点</h5><ul><li>需要使用额外空间</li><li>建立hash需要时间，不适合高频增删改，低频查找</li><li>数据量小，线形查找更快<br><a name="GSzTv"></a></li></ul><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h4><p><a name="Qd7nu"></a></p><h3 id="排序算法" tabindex="-1"><a class="header-anchor" href="#排序算法" aria-hidden="true">#</a> 排序算法</h3><p><a name="BVKIr"></a></p><h4 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序" aria-hidden="true">#</a> 冒泡排序</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arrs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
        nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="gojTO"></a></p><h4 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序" aria-hidden="true">#</a> 插入排序</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
      j<span class="token operator">--</span>
    <span class="token punctuation">}</span>
    nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="gckur"></a></p><h4 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序" aria-hidden="true">#</a> 快速排序</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 先计算一次分割点，然后递归</span>
<span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 取第一个元素为基准值</span>
  <span class="token comment">// i 从左往右找到一个 大于基准值的</span>
  <span class="token comment">// j 从右往左找到一个 小于基准值的 </span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> left
  <span class="token keyword">let</span> j <span class="token operator">=</span> right
  <span class="token keyword">const</span> base <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      j<span class="token operator">--</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      i<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// i,j重叠</span>
  <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> left<span class="token punctuation">)</span>
  <span class="token keyword">return</span> i
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> 
  nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
  nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp
<span class="token punctuation">}</span>
<span class="token comment">// </span>
<span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> pivot <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
  <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> pivot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,99);function i(c,l){return n(),s("div",null,[e(" markdownlint-disable MD024 "),o])}const d=a(t,[["render",i],["__file","Hello算法笔记.html.vue"]]);export{d as default};
