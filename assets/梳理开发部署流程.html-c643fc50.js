import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,d}from"./app-d8bce884.js";const r={},n=d('<h3 id="本地开发" tabindex="-1"><a class="header-anchor" href="#本地开发" aria-hidden="true">#</a> 本地开发</h3><p>在本地开发中，是先运行deploy/dev下的run_ui.sh<br> 这个shell命令的作用是配置好nginx，使用docker-compose配置文件的方式，本地起一个docker容器<br> 接着起本地项目，然后实现本地开发</p><h4 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> docker-compose：</h4><p>我们知道使用一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。<br><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><h4 id="审核平台" tabindex="-1"><a class="header-anchor" href="#审核平台" aria-hidden="true">#</a> 审核平台</h4><p>审核平台开发环境并没有用到docker，还是用的webpack的proxy代理</p><h4 id="技能平台" tabindex="-1"><a class="header-anchor" href="#技能平台" aria-hidden="true">#</a> 技能平台</h4><p>如上，是用的docker</p><h3 id="技能平台vue-cli3与2的打包对比" tabindex="-1"><a class="header-anchor" href="#技能平台vue-cli3与2的打包对比" aria-hidden="true">#</a> 技能平台vue-cli3与2的打包对比</h3><h4 id="cli3没用懒加载" tabindex="-1"><a class="header-anchor" href="#cli3没用懒加载" aria-hidden="true">#</a> cli3没用懒加载</h4><figure><img src="https://cdn.nlark.com/yuque/0/2019/png/297368/1571889259540-c18f93b0-d2b6-48a9-9787-d968d1d9a7c0.png#align=left&amp;display=inline&amp;height=182&amp;name=image.png&amp;originHeight=364&amp;originWidth=1708&amp;size=85322&amp;status=done&amp;style=none&amp;width=854" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="cli2老项目" tabindex="-1"><a class="header-anchor" href="#cli2老项目" aria-hidden="true">#</a> cli2老项目</h4><figure><img src="https://cdn.nlark.com/yuque/0/2019/png/297368/1571889336458-beff4987-4c18-403f-9e43-5c680054f5ec.png#align=left&amp;display=inline&amp;height=228&amp;name=image.png&amp;originHeight=456&amp;originWidth=1562&amp;size=162596&amp;status=done&amp;style=none&amp;width=781" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="新流程" tabindex="-1"><a class="header-anchor" href="#新流程" aria-hidden="true">#</a> 新流程</h3>',14),c=[n];function o(h,t){return a(),i("div",null,c)}const l=e(r,[["render",o],["__file","梳理开发部署流程.html.vue"]]);export{l as default};
