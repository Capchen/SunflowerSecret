import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as n,b as e,e as a,f as d,d as t}from"./app-87a845fd.js";const p="/SunflowerSecret/assets/images/CLI/1592273834835-a00be586-dd93-4431-8107-55e677ecad1e.png",r="/SunflowerSecret/assets/images/CLI/1592275210087-a6a4830c-f19d-4198-af84-fa91d6ff872b.png",g="/SunflowerSecret/assets/images/CLI/1592275571887-8e420077-90fe-4304-b60d-b8a219fa1197.png",u="/SunflowerSecret/assets/images/CLI/1592277241475-dd841cc7-0b31-41c0-bb18-fc9479fb8ef6.png",h="/SunflowerSecret/assets/images/CLI/1592278053195-f7af78ee-7269-4e5f-945c-a0640e544a4b.png",_="/SunflowerSecret/assets/images/CLI/1592279427634-8d98b159-7f81-4609-b4c7-5f87cbd04759.png",m="/SunflowerSecret/assets/images/CLI/1592279566390-b69cca3f-ee89-4382-9d37-fe7b582a7379.png",b="/SunflowerSecret/assets/images/CLI/1592279490903-39bd3753-cdb7-4f7b-9c5a-78351856de51.png",f="/SunflowerSecret/assets/images/CLI/1592279746317-3387c5f5-3bd6-4f5b-9630-bd2ff802a784.png",k="/SunflowerSecret/assets/images/CLI/1592279952534-e2b7dcb7-327b-4fa7-b98b-ab7af4ccad78.png",y="/SunflowerSecret/assets/images/CLI/1592289281093-6738e48c-96a0-41af-b5d2-5aa1bc977d56.png",v="/SunflowerSecret/assets/images/CLI/1592289135206-6e4dd1c0-9d5f-4127-80ab-3a313a603acd.png",S="/SunflowerSecret/assets/images/CLI/1592289415824-e66f3cb7-ad13-4607-a9bd-44769a8db297.png",w="/SunflowerSecret/assets/images/CLI/1592289717866-af46a642-40e5-49a7-9b47-c2ecbe146b4f.png",C="/SunflowerSecret/assets/images/CLI/1592290344614-5cd1e3d3-f6e8-4797-838c-e99f2d1c6236.png",z="/SunflowerSecret/assets/images/CLI/1592289879274-f9b03ed5-6b7e-44b2-b2a8-a522027a4e42.png",I="/SunflowerSecret/assets/images/CLI/1592290489914-b984706f-ee96-4aeb-aaab-26b58ccf4b17.png",L="/SunflowerSecret/assets/images/CLI/1592291351981-8177457e-206b-4838-b1e5-be48ed695939.png",x="/SunflowerSecret/assets/images/CLI/1592291720360-2c65826f-d079-4f0e-8795-2a586b41add7.png",q="/SunflowerSecret/assets/images/CLI/1592292123998-d056c182-7ceb-431d-bf65-76effda2ce3e.png",U="/SunflowerSecret/assets/images/CLI/1592292214309-5c9f7c48-34ba-4e48-b5f9-252cf3a0cdda.png",H="/SunflowerSecret/assets/images/CLI/1592447032476-de54a496-2339-45de-bce2-fc959eba94aa.png",W={},N=g+"#align=left&display=inline&height=381&name=image.png&originHeight=446&originWidth=819&size=34526&status=done&style=none&width=699",T=u+"#align=left&display=inline&height=97&name=image.png&originHeight=180&originWidth=386&size=14474&status=done&style=none&width=207",O=h+"#align=left&display=inline&height=359&name=image.png&originHeight=876&originWidth=354&size=55816&status=done&style=none&width=145",R=_+"#align=left&display=inline&height=172&name=image.png&originHeight=172&originWidth=828&size=20128&status=done&style=none&width=828",E=m+"#align=left&display=inline&height=150&name=image.png&originHeight=150&originWidth=584&size=20708&status=done&style=none&width=584",A=b+"#align=left&display=inline&height=403&name=image.png&originHeight=558&originWidth=974&size=84900&status=done&style=none&width=703",M=f+"#align=left&display=inline&height=274&name=image.png&originHeight=450&originWidth=946&size=40511&status=done&style=none&width=576",B=k+"#align=left&display=inline&height=198&name=image.png&originHeight=198&originWidth=1010&size=50660&status=done&style=none&width=1010",P=y+"#align=left&display=inline&height=656&name=image.png&originHeight=656&originWidth=800&size=88260&status=done&style=none&width=800",V=v+"#align=left&display=inline&height=510&name=image.png&originHeight=510&originWidth=986&size=70294&status=done&style=none&width=986",D=S+"#align=left&display=inline&height=196&name=image.png&originHeight=196&originWidth=962&size=27578&status=done&style=none&width=962",F=w+"#align=left&display=inline&height=339&name=image.png&originHeight=806&originWidth=418&size=47054&status=done&style=none&width=176",j=C+"#align=left&display=inline&height=214&name=image.png&originHeight=326&originWidth=708&size=30152&status=done&style=none&width=464",K=z+"#align=left&display=inline&height=337&name=image.png&originHeight=544&originWidth=1028&size=70407&status=done&style=none&width=636",X=I+"#align=left&display=inline&height=201&name=image.png&originHeight=358&originWidth=402&size=25085&status=done&style=none&width=226",$=L+"#align=left&display=inline&height=756&name=image.png&originHeight=756&originWidth=1154&size=191821&status=done&style=none&width=1154",G=x+"#align=left&display=inline&height=366&name=image.png&originHeight=572&originWidth=1006&size=115718&status=done&style=none&width=644",J=q+"#align=left&display=inline&height=42&name=image.png&originHeight=42&originWidth=594&size=6302&status=done&style=none&width=594",Q=U+"#align=left&display=inline&height=95&name=image.png&originHeight=186&originWidth=1110&size=25329&status=done&style=none&width=569",Y=H+"#align=left&display=inline&height=371&name=image.png&originHeight=542&originWidth=992&size=77489&status=done&style=none&width=679",Z=t('<h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h2><p>产品模块接入是指在 <code>BF2020</code> 中，增加一个服务模块。以中控模块（ccm）为例，如图：<br><img src="'+p+'" alt="image.png" loading="lazy"><br> 在选择企业之后，左侧会出现企业有权限使用的产品服务，现有九个。我们的产品模块接入，就是需要在之后增加一个产品模块入口。</p><h2 id="准备阶段" tabindex="-1"><a class="header-anchor" href="#准备阶段" aria-hidden="true">#</a> 准备阶段</h2>',3),nn=n("code",null,"emoti-cli",-1),en={href:"https://gitlab.emotibot.com/emoti_frontend/emoti-cli",target:"_blank",rel:"noopener noreferrer"},sn=n("blockquote",null,[n("p",null,"注意：这里需要使用的是bf2020_product模版")],-1),an=n("p",null,[e("并且还需要在 "),n("code",null,"emotibot_deploy"),e(" 部署工程中加入新的模块。")],-1),tn=n("p",null,[e("我们需要知道中控模块UI工程和现有的产品UI工程的关系。"),n("br"),e(" 下图表示每个产品对应一个代码工程。"),n("br"),n("img",{src:r,alt:"image.png",loading:"lazy"})],-1),on=n("p",null,[e("产品模块是如何被访问及如何请求后台服务的？下图表示一个请求的过程："),n("br"),n("img",{src:N,alt:"image.png",loading:"lazy"})],-1),ln=n("p",null,[e("总结：新的产品UI工程是独立的，它们通过"),n("code",null,"emotibot_deploy"),e("部署工程的设置相互关联。")],-1),cn=n("h2",{id:"ui工程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ui工程","aria-hidden":"true"},"#"),e(" UI工程")],-1),dn=n("p",null,[e("通过"),n("code",null,"emoti-cli"),e("模版搭建的项目就已经能进行本地开发了。"),n("br"),e(" 入口文件是："),n("br"),n("img",{src:T,alt:"image.png",loading:"lazy"})],-1),pn=n("ul",null,[n("li",null,"bf2020_auth.js: 定义了一些基础接口，例如获取产品列表，获取会话维度等"),n("li",null,"FrameworkProduct.vue: 基础界面，包含右侧产品列表，顶部工具栏等"),n("li",null,"request.js: 封装的请求接口")],-1),rn=n("p",null,"业务代码开发完毕，就可以进行构建部署了",-1),gn=n("h3",{id:"docker构建设置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#docker构建设置","aria-hidden":"true"},"#"),e(" docker构建设置")],-1),un=n("p",null,[n("img",{src:O,alt:"image.png",loading:"lazy"}),n("br"),e(" 上图的docker目录是模版工程带入的，docker_new是中控模块现在采用的。两者的主要区别是docker_new使用的是新的基础镜像，是参照运维同学优化后的镜像来的，体积会更小。（采用哪种方式还需要确认下）")],-1),hn=n("h4",{id:"nginx-conf-template",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nginx-conf-template","aria-hidden":"true"},"#"),e(" nginx.conf.template")],-1),_n=n("p",null,[e("设置upstream，其中server以变量存在:"),n("br"),n("img",{src:R,alt:"image.png",loading:"lazy"}),n("br"),e(" 设置listen，端口也是以变量存在："),n("br"),n("img",{src:E,alt:"image.png",loading:"lazy"}),n("br"),e(" 设置location："),n("br"),n("img",{src:A,alt:"image.png",loading:"lazy"})],-1),mn=n("blockquote",null,[n("p",null,"以上的修改使用到了两个变量。分别为CCM_BACKEND_URL / CCM_UI_FONT_PORT")],-1),bn=n("p",null,[e("这两个变量我们需要在 "),n("code",null,"entrypoint.sh"),e("  中声明，并且需要在deploy工程中定义"),n("br"),n("img",{src:M,alt:"image.png",loading:"lazy"})],-1),fn=n("h3",{id:"api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#api","aria-hidden":"true"},"#"),e(" API")],-1),kn=n("p",null,[n("img",{src:B,alt:"image.png",loading:"lazy"}),n("br"),e(" 对于API的URL设置，我加了个前缀，需要注意的是需要以 "),n("code",null,"./"),e(" 相对路径的方式")],-1),yn=n("h2",{id:"emotibot-loadbalance",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#emotibot-loadbalance","aria-hidden":"true"},"#"),e(" emotibot-loadbalance")],-1),vn=n("p",null,"对照准备阶段的请求流程图：新的请求进来，需要通过loadbalance的转发，所以还需要修改loadbalance的配置。",-1),Sn=n("h3",{id:"nginx-conf-template-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nginx-conf-template-1","aria-hidden":"true"},"#"),e(" nginx.conf.template")],-1),wn=n("p",null,[e("增加upstream,这里有使用 "),n("code",null,"LB_CCM_UI_URL"),e(" 变量"),n("br"),n("img",{src:P,alt:"image.png",loading:"lazy"}),n("br"),e(" 增加对ccm.html的location转发"),n("br"),n("img",{src:V,alt:"image.png",loading:"lazy"})],-1),Cn={id:"entrypoint-sh",tabindex:"-1"},zn=n("a",{class:"header-anchor",href:"#entrypoint-sh","aria-hidden":"true"},"#",-1),In={href:"http://entrypoint.sh",target:"_blank",rel:"noopener noreferrer"},Ln=n("p",null,[e("这里需要声明变量的引用，并且需要在deploy工程中定义"),n("br"),n("img",{src:D,alt:"image.png",loading:"lazy"})],-1),xn=n("h2",{id:"emotibot-deploy",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#emotibot-deploy","aria-hidden":"true"},"#"),e(" emotibot_deploy")],-1),qn=n("p",null,"从上文我们提到，emotibot_deploy的修改点",-1),Un=n("ul",null,[n("li",null,"增加新模块"),n("li",null,"增加变量定义")],-1),Hn=n("h3",{id:"增加新模块",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#增加新模块","aria-hidden":"true"},"#"),e(" 增加新模块")],-1),Wn=n("p",null,[n("img",{src:F,alt:"image.png",loading:"lazy"}),n("br"),e(" 增加了一个 "),n("code",null,"10-ccm"),e(" 的目录，里面定义了关于ccm的docker容器。单机部署主要就是修改以下三个文件")],-1),Nn=n("ul",null,[n("li",null,"dev.env-定义的环境变量，可以在module.yaml文件中使用"),n("li",null,"module.yaml-创建容器的文件"),n("li",null,"port.yaml-定义各个容器暴露的端口")],-1),Tn=n("h4",{id:"dev-env",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dev-env","aria-hidden":"true"},"#"),e(" dev.env")],-1),On=n("p",null,[e("定义一些变量，这里定义了中控的名称和端口"),n("br"),n("img",{src:j,alt:"image.png",loading:"lazy"})],-1),Rn=n("h4",{id:"module-yaml",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#module-yaml","aria-hidden":"true"},"#"),e(" module.yaml")],-1),En=n("p",null,[e("增加一个中控容器"),n("br"),n("img",{src:K,alt:"image.png",loading:"lazy"})],-1),An=n("h4",{id:"port-yaml",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#port-yaml","aria-hidden":"true"},"#"),e(" port.yaml")],-1),Mn=n("p",null,[e("定义了两个容器的端口，需要唯一"),n("br"),n("img",{src:X,alt:"image.png",loading:"lazy"})],-1),Bn=n("h3",{id:"变量定义",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#变量定义","aria-hidden":"true"},"#"),e(" 变量定义")],-1),Pn=n("p",null,[e("上文，我们在两个地方使用到了环境变量。一个是在UI工程的docker构建目录下的 nginx.conf.template文件中；一个是在 loadbalance的nginx.conf.template文件中"),n("br"),e(" UI工程的变量为CCM_BACKEND_URL / CCM_UI_FONT_PORT，这两个变量我们在 "),n("code",null,"module.yaml"),e(" 文件中 "),n("code",null,"ccm-ui"),e(" 模块下的environment的选项中定义。如上图的module.yaml")],-1),Vn=n("blockquote",null,[n("p",null,"nginx.cong.template中使用的变量必须在对应模块的environment中声明，而environment中使用的变量需要在dev.env文件中声明。nginx.cong.template中不可以直接使用dev.env中的变量")],-1),Dn=n("p",null,[e("loadbalance的变量为LB_CCM_UI_URL，同样，这个变量也需要module.yaml文件中load-balance模块下的environment选项中定义。需要注意的是一个是在1-bf文件下，一个在新增的文件下（10-ccm）"),n("br"),n("img",{src:$,alt:"image.png",loading:"lazy"})],-1),Fn=n("p",null,"上图定义的是load-balance转发到新模块的地址端口，表示本地的8909端口，而8909端口我们已经在port.yaml文件中设置了。",-1),jn=n("h2",{id:"init-db",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#init-db","aria-hidden":"true"},"#"),e(" init-db")],-1),Kn=n("p",null,[e("（在部署工程下）"),n("br"),e(" 这里需要设置的是products接口返回的数据，只有返回了新的产品，才能在右边的产品列表中展示入口."),n("br"),n("img",{src:G,alt:"image.png",loading:"lazy"})],-1),Xn=n("p",null,"步骤如下：",-1),$n=n("ol",null,[n("li",null,[e("在1-bf文件夹下的init-db文件夹下的sql文件夹下的auth文件夹下新增一个 "),n("code",null,".sql"),e(" 文件")])],-1),Gn=t('<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- +migrate Up</span>\n\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>code<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>sort<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>position<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>icon<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>route<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>is_link<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ccm&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;menu_product&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;color-zhongkong&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ccm&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2020-06-10 13:46:52&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>ent_prods<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>ent_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>prod_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span>\n<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- +migrate Down</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在docker目录下打个包并且push</li></ol>',2),Jn=n("figure",null,[n("img",{src:J,alt:"image.png",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image.png")],-1),Qn=n("ol",{start:"3"},[n("li",null,"修改infra目录下的init-db.yaml中的image")],-1),Yn=n("figure",null,[n("img",{src:Q,alt:"image.png",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image.png")],-1),Zn=t('<ol start="4"><li>服务器重新部署</li></ol><h2 id="consul注册" tabindex="-1"><a class="header-anchor" href="#consul注册" aria-hidden="true">#</a> consul注册</h2><p>这一步的操作<br> 主要就是在entrypoint.sh中加入如下代码，主动去curl注册一个新的模块</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token variable">${CCM_CONSUL_URL}</span>/v1/agent/service/register <span class="token parameter variable">-X</span> PUT <span class="token parameter variable">-i</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json&quot;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;ID&quot;:&quot;ccm&quot;,&quot;Name&quot;:&quot;ccm&quot;,&quot;Tags&quot;:[],&quot;Address&quot;:&quot;ccm-ui&quot;,&quot;Port&quot;:8909,&quot;EnableTagOverride&quot;:false}&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Address填写的是容器名，即定义的container_name。也可以填写当前的ip。port就是端口</p></blockquote>',5),ne=n("p",null,[e("CCM_CONSUL_URL变量需要在deploy工程的environment选项中声明"),n("br"),n("img",{src:Y,alt:"image.png",loading:"lazy"}),n("br"),e(" CONSUL_HOST和CONSUL_PORT可以理解已经在全局环境中定义了。直接使用就好了。")],-1),ee=n("br",null,null,-1),se={href:"http://172.16.103.21:8500/ui/dc1/services",target:"_blank",rel:"noopener noreferrer"},ae=n("br",null,null,-1),te=n("blockquote",null,[n("p",null,[e("这里的 "),n("code",null,"172.16.103.21:8500"),e(" 是中控开发环境的ip和端口，需要替换成自己部署服务的ip和端口")])],-1);function ie(oe,le){const s=o("ExternalLinkIcon");return l(),c("div",null,[Z,n("p",null,[e("我们使用 "),nn,e(" 搭建新的UI工程。使用方式参考"),n("a",en,[e("README.md"),a(s)])]),sn,an,tn,on,ln,cn,dn,pn,rn,gn,un,hn,_n,mn,bn,fn,kn,yn,vn,Sn,wn,n("h3",Cn,[zn,e(),n("a",In,[e("entrypoint.sh"),a(s)])]),Ln,xn,qn,Un,Hn,Wn,Nn,Tn,On,Rn,En,An,Mn,Bn,Pn,Vn,Dn,Fn,jn,Kn,Xn,$n,d(" ![image.png](/assets/images/CLI/1592291943256-d5181d98-fddb-44b8-bb62-fcacc04c7718.png#align=left&display=inline&height=48&name=image.png&originHeight=48&originWidth=930&size=10645&status=done&style=none&width=930) "),Gn,Jn,Qn,Yn,Zn,ne,n("p",null,[e("完成之后重新部署项目，"),ee,n("a",se,[e("http://172.16.103.21:8500/ui/dc1/services"),a(s)]),ae,e(" 通过这个地址就可以看到模块是否已经注册上去。")]),te])}const pe=i(W,[["render",ie],["__file","产品模块接入-不详细指南.html.vue"]]);export{pe as default};
