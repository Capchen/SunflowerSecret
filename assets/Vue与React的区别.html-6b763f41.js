const e=JSON.parse('{"key":"v-76237bb9","path":"/Vue/Vue%E4%B8%8EReact%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"Vue与React的区别","lang":"zh-CN","frontmatter":{"title":"Vue与React的区别","shortTitle":"","description":"共同点 数据驱动视图 数据的变动会通知所有订阅者，通过diff算法，实现最小更新 组件化 组件化思想，所以都需要考虑数据流的问题，数据状态管理的解决方案也就自然而然 Virtual DOM 不同点 实现数据驱动的方式 实现方式的不同，会导致优化能力的不同。 Vue 静态分析 设计风格 React早期是class组件和生命周期，这就引申出高阶组件 Vue也是有生命周期的概念，","icon":"","author":{"name":"Cap"},"isOriginal":true,"date":"2024-04-01T00:00:00.000Z","category":"","tag":"","sticky":100,"star":true,"article":true,"timeline":true,"image":"","editLink":false,"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/SunflowerSecret/Vue/Vue%E4%B8%8EReact%E7%9A%84%E5%8C%BA%E5%88%AB.html"}],["meta",{"property":"og:site_name","content":"Cap"}],["meta",{"property":"og:title","content":"Vue与React的区别"}],["meta",{"property":"og:description","content":"共同点 数据驱动视图 数据的变动会通知所有订阅者，通过diff算法，实现最小更新 组件化 组件化思想，所以都需要考虑数据流的问题，数据状态管理的解决方案也就自然而然 Virtual DOM 不同点 实现数据驱动的方式 实现方式的不同，会导致优化能力的不同。 Vue 静态分析 设计风格 React早期是class组件和生命周期，这就引申出高阶组件 Vue也是有生命周期的概念，"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Cap"}],["meta",{"property":"article:published_time","content":"2024-04-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue与React的区别\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cap\\"}]}"]]},"headers":[{"level":2,"title":"共同点","slug":"共同点","link":"#共同点","children":[{"level":3,"title":"数据驱动视图","slug":"数据驱动视图","link":"#数据驱动视图","children":[]},{"level":3,"title":"组件化","slug":"组件化","link":"#组件化","children":[]},{"level":3,"title":"Virtual DOM","slug":"virtual-dom","link":"#virtual-dom","children":[]}]},{"level":2,"title":"不同点","slug":"不同点","link":"#不同点","children":[{"level":3,"title":"实现数据驱动的方式","slug":"实现数据驱动的方式","link":"#实现数据驱动的方式","children":[]},{"level":3,"title":"设计风格","slug":"设计风格","link":"#设计风格","children":[]}]}],"readingTime":{"minutes":1.39,"words":418},"filePathRelative":"Vue/Vue与React的区别.md","localizedDate":"2024年4月1日","excerpt":"<h2> 共同点</h2>\\n<h3> 数据驱动视图</h3>\\n<p>数据的变动会通知所有订阅者，通过diff算法，实现最小更新</p>\\n<h3> 组件化</h3>\\n<p>组件化思想，所以都需要考虑数据流的问题，数据状态管理的解决方案也就自然而然</p>\\n<h3> Virtual DOM</h3>\\n<h2> 不同点</h2>\\n<h3> 实现数据驱动的方式</h3>\\n<p>实现方式的不同，会导致优化能力的不同。</p>\\n<p>Vue</p>\\n<ul>\\n<li>静态分析</li>\\n</ul>\\n<h3> 设计风格</h3>\\n<p>React早期是class组件和生命周期，这就引申出高阶组件</p>\\n<p>Vue也是有生命周期的概念，</p>","autoDesc":true}');export{e as data};
