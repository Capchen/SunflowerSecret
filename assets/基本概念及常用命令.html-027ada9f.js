const e=JSON.parse('{"key":"v-d4f5456e","path":"/Docker/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","title":"基本概念及常用命令","lang":"zh-CN","frontmatter":{"article":true,"author":{"name":"Cap"},"category":"","date":"2020-07-07T00:00:00.000Z","description":"镜像image 分层存储 容器container 基于镜像的最上层再加一层，作为容器的存储层。他和镜像的关系类似与类和实例 仓库 常用命令 docker run --name web2 -d -p 81:80 nginx:v2 //基于nginx:v2镜像启动名为web2的容器并映射本机81端口到容器的80端口 docker image ls // 列出镜像 docker image ls -a // 列出中间层镜像 docker container ls // 列出容器 docker rmi $(docker images -a -q) // 删除没有使用的镜像 docker ps ｜grep $(name) // 筛选过滤","editLink":false,"icon":"","image":"","isOriginal":true,"shortTitle":"","star":false,"sticky":1,"tag":"docker","timeline":true,"title":"基本概念及常用命令","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/SunflowerSecret/Docker/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"Cap"}],["meta",{"property":"og:title","content":"基本概念及常用命令"}],["meta",{"property":"og:description","content":"镜像image 分层存储 容器container 基于镜像的最上层再加一层，作为容器的存储层。他和镜像的关系类似与类和实例 仓库 常用命令 docker run --name web2 -d -p 81:80 nginx:v2 //基于nginx:v2镜像启动名为web2的容器并映射本机81端口到容器的80端口 docker image ls // 列出镜像 docker image ls -a // 列出中间层镜像 docker container ls // 列出容器 docker rmi $(docker images -a -q) // 删除没有使用的镜像 docker ps ｜grep $(name) // 筛选过滤"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Cap"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:published_time","content":"2020-07-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基本概念及常用命令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-07-07T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cap\\"}]}"]]},"headers":[{"level":3,"title":"镜像image","slug":"镜像image","link":"#镜像image","children":[]},{"level":3,"title":"容器container","slug":"容器container","link":"#容器container","children":[]},{"level":3,"title":"仓库","slug":"仓库","link":"#仓库","children":[]},{"level":3,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":3,"title":"compose","slug":"compose","link":"#compose","children":[]},{"level":3,"title":"挂载操作","slug":"挂载操作","link":"#挂载操作","children":[]},{"level":3,"title":"进入对应容器","slug":"进入对应容器","link":"#进入对应容器","children":[]}],"readingTime":{"minutes":1.25,"words":375},"filePathRelative":"Docker/基本概念及常用命令.md","localizedDate":"2020年7月7日","excerpt":"<h3> 镜像image</h3>\\n<p>分层存储</p>\\n<h3> 容器container</h3>\\n<p>基于镜像的最上层再加一层，作为容器的存储层。他和镜像的关系类似与<strong>类</strong>和<strong>实例</strong></p>\\n<h3> 仓库</h3>\\n<h3> 常用命令</h3>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">docker</span> run <span class=\\"token parameter variable\\">--name</span> web2 <span class=\\"token parameter variable\\">-d</span> <span class=\\"token parameter variable\\">-p</span> <span class=\\"token number\\">81</span>:80 nginx:v2 //基于nginx:v2镜像启动名为web2的容器并映射本机81端口到容器的80端口\\n<span class=\\"token function\\">docker</span> image <span class=\\"token function\\">ls</span> // 列出镜像\\n<span class=\\"token function\\">docker</span> image <span class=\\"token function\\">ls</span> <span class=\\"token parameter variable\\">-a</span> // 列出中间层镜像\\n<span class=\\"token function\\">docker</span> container <span class=\\"token function\\">ls</span> // 列出容器\\n<span class=\\"token function\\">docker</span> rmi <span class=\\"token variable\\"><span class=\\"token variable\\">$(</span><span class=\\"token function\\">docker</span> images <span class=\\"token parameter variable\\">-a</span> <span class=\\"token parameter variable\\">-q</span><span class=\\"token variable\\">)</span></span> // 删除没有使用的镜像\\n<span class=\\"token function\\">docker</span> <span class=\\"token function\\">ps</span> ｜grep <span class=\\"token variable\\"><span class=\\"token variable\\">$(</span>name<span class=\\"token variable\\">)</span></span> // 筛选过滤\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
