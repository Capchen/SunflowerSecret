import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as t,c as n,a as e,b as d,e as h,d as c}from"./app-bf2cb439.js";const o={},l={href:"https://mp.weixin.qq.com/s?__biz=MzkxNTE3ODU0NA==&mid=2247514194&idx=1&sn=c08cab11ec70f284dec66d3f69cd23d1&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},s=c('<h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><p>基于 Git 提供的钩子函数和基于 Gitlab 的能力。</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><h3 id="问题一" tabindex="-1"><a class="header-anchor" href="#问题一" aria-hidden="true">#</a> 问题一</h3><p>这里需要考虑的是只要开发者具备 Developer 权限，那么他就可以修改大仓任何目录下的代码，并且本地可以提交，这样会导致本地源码依赖出现很大的风险：会出现本地代码构建和生产环境构建不一致的情况，在研发流程意识不强的情况下很容易引发线上问题。本着对代码共享的原则，对于代码文件读权限不做控制，也允许研发修改代码，但是对修改的代码的发布会做流程上的强管控。这里就会涉及到 Gitlab 的分支保护机制以及文件 Owner 权限配置。</p><h3 id="问题二" tabindex="-1"><a class="header-anchor" href="#问题二" aria-hidden="true">#</a> 问题二</h3><p>研发可以绕开 MR 的流程，直接本地合并代码到发布分支</p><h2 id="解决思路" tabindex="-1"><a class="header-anchor" href="#解决思路" aria-hidden="true">#</a> 解决思路</h2><h3 id="解决问题一" tabindex="-1"><a class="header-anchor" href="#解决问题一" aria-hidden="true">#</a> 解决问题一</h3><ol><li><p>在 GitLab 未支持文件目录权限设置之前，对于文件目录权限的控制主要依赖 Git 的钩子函数</p></li><li><p>在 GitLab 开始支持文件目录权限设置，可以用于更细粒度的文件级别的权限控制，内部就支持文件目录和研发的权限映射关系</p></li><li><p>强MR流程，需要对应的文件 Owner 进行确认评审</p></li></ol><h3 id="解决问题二" tabindex="-1"><a class="header-anchor" href="#解决问题二" aria-hidden="true">#</a> 解决问题二</h3><ol><li><p>分支策略，分支权限</p></li><li><p>git提交钩子函数</p></li></ol>',12);function p(_,f){const a=i("ExternalLinkIcon");return t(),n("div",null,[e("ul",null,[e("li",null,[e("a",l,[d("参考文档"),h(a)])])]),s])}const u=r(o,[["render",p],["__file","权限设计.html.vue"]]);export{u as default};
