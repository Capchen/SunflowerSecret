import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,d as t}from"./app-0e6dcd4b.js";const e={},o=t(`<h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h2><h3 id="provider-作用域" tabindex="-1"><a class="header-anchor" href="#provider-作用域" aria-hidden="true">#</a> Provider 作用域</h3><p>默认使用单例作用域</p><table><thead><tr><th>类型</th><th>说明</th><th></th></tr></thead><tbody><tr><td>DEFAULT</td><td>该提供者的单一实例在整个应用程序中共享。实例的生命周期直接与应用程序的生命周期相关联。一旦应用程序启动，所有单例提供者都已被实例化。默认情况下使用单例作用域。</td><td></td></tr><tr><td>REQUEST</td><td>为每个传入请求创建一个该提供者的新实例。实例会在请求完成处理后进行垃圾回收</td><td></td></tr><tr><td>TRANSIENT</td><td>瞬态提供者在不同的消费者之间不共享。每个注入瞬态提供者的消费者都会收到一个新的、专用的实例。</td><td></td></tr></tbody></table><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> scope<span class="token operator">:</span> Scope<span class="token punctuation">.</span><span class="token constant">REQUEST</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="controller-作用域" tabindex="-1"><a class="header-anchor" href="#controller-作用域" aria-hidden="true">#</a> Controller 作用域</h2><p>控制器也可以具有作用域，该作用域适用于在该控制器中声明的所有请求方法处理程序。与提供者作用域类似，控制器的作用域声明了其生命周期。对于基于请求的控制器，为每个传入请求创建一个新实例，并在请求处理完成后进行垃圾回收。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  path<span class="token operator">:</span> <span class="token string">&#39;cats&#39;</span><span class="token punctuation">,</span>
  scope<span class="token operator">:</span> Scope<span class="token punctuation">.</span><span class="token constant">REQUEST</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CatsController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="作用域层级" tabindex="-1"><a class="header-anchor" href="#作用域层级" aria-hidden="true">#</a> 作用域层级</h2><ul><li><p>REQUEST作用域会向注入链上传播，A依赖B，B依赖C，假设B是REQUEST作用域，那么A也会成为REQUEST作用域，但是C不受影响</p></li><li><p>TRANSIENT作用域不会影响依赖链上</p></li></ul><h2 id="持久性提供者" tabindex="-1"><a class="header-anchor" href="#持久性提供者" aria-hidden="true">#</a> 持久性提供者</h2><p>TODO</p>`,12),p=[o];function c(r,d){return n(),s("div",null,p)}const u=a(e,[["render",c],["__file","作用域.html.vue"]]);export{u as default};
