import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,d as h}from"./app-6fdd5a88.js";const d={},i=h('<h2 id="共同点" tabindex="-1"><a class="header-anchor" href="#共同点" aria-hidden="true">#</a> 共同点</h2><h3 id="数据驱动视图" tabindex="-1"><a class="header-anchor" href="#数据驱动视图" aria-hidden="true">#</a> 数据驱动视图</h3><p>数据的变动会通知所有订阅者，通过diff算法，实现最小更新</p><h3 id="组件化" tabindex="-1"><a class="header-anchor" href="#组件化" aria-hidden="true">#</a> 组件化</h3><p>组件化思想，所以都需要考虑数据流的问题，数据状态管理的解决方案也就自然而然</p><h3 id="virtual-dom" tabindex="-1"><a class="header-anchor" href="#virtual-dom" aria-hidden="true">#</a> Virtual DOM</h3><h2 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点" aria-hidden="true">#</a> 不同点</h2><h3 id="实现数据驱动的方式" tabindex="-1"><a class="header-anchor" href="#实现数据驱动的方式" aria-hidden="true">#</a> 实现数据驱动的方式</h3><p>实现方式的不同，会导致优化能力的不同。</p><p>Vue</p><ul><li>静态分析</li></ul><h3 id="设计风格" tabindex="-1"><a class="header-anchor" href="#设计风格" aria-hidden="true">#</a> 设计风格</h3><p>React早期是class组件和生命周期，这就引申出高阶组件</p><p>Vue也是有生命周期的概念，</p><p>探究生命周期的原理，其他它就是收集和处理副作用的节点，是副作用在视图不同阶段的产物。</p><p>这里需要思考，什么是<strong>副作用</strong>，怎么理解它</p>',16),t=[i];function n(c,s){return e(),r("div",null,t)}const p=a(d,[["render",n],["__file","Vue与React的区别.html.vue"]]);export{p as default};
