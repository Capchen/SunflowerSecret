import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o,c as s,a as t,b as i,d as n,e as a}from"./app-7c534dd5.js";const u={},h={href:"https://github.com/vbenjs/vue-vben-admin.git",target:"_blank",rel:"noopener noreferrer"},p={href:"https://github.com/vbenjs/vben-admin-thin-next",target:"_blank",rel:"noopener noreferrer"},v={href:"https://vvbin.cn/next/#/login?redirect=/dashboard",target:"_blank",rel:"noopener noreferrer"},b={href:"https://vvbin.cn/doc-next/",target:"_blank",rel:"noopener noreferrer"},c={href:"https://github.com/xiaoxian521/vue-pure-admin",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/xiaoxian521/pure-admin-thin",target:"_blank",rel:"noopener noreferrer"},m={href:"https://vue-pure-admin.vercel.app/#/login",target:"_blank",rel:"noopener noreferrer"},x={href:"https://pure-admin-doc.vercel.app/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/zclzone/vue-naive-admin",target:"_blank",rel:"noopener noreferrer"},g={href:"https://zclzone.github.io/vue-naive-admin-docs/",target:"_blank",rel:"noopener noreferrer"};function k(P,e){const r=d("ExternalLinkIcon");return o(),s("div",null,[e[10]||(e[10]=t('<h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h3><p>前端已经在新的PC端项目上使用<code>vite+vue3+ts+pinia+vue-router</code>技术栈进行开发(UI库不一样)，但是并没有形成一个统一配置模板。未来开发人员切换项目的时候可能会有一定的熟悉成本，而且在在新的PC端项目开始的时候，还需要再来一次项目初始化。尽早对PC端模板达成一致，可以尽早在项目中实践。</p><h3 id="期望" tabindex="-1"><a class="header-anchor" href="#期望" aria-hidden="true">#</a> 期望</h3><ul><li>PC端能统一模板</li><li>整理出一套模板后，再在此基础上开发gyenno-cli，达到脚本自动化初始化项目</li></ul><h3 id="如何形成较稳定的统一模板" tabindex="-1"><a class="header-anchor" href="#如何形成较稳定的统一模板" aria-hidden="true">#</a> 如何形成较稳定的统一模板</h3><p>PS.形成统一模版是默认基于当前<code>Vite, Vue3, TypeScript, Pinia</code>技术栈进行的，也就是默认技术栈已经统一。</p><h4 id="方案1-根据公司现有的pc端项目去做整理归纳" tabindex="-1"><a class="header-anchor" href="#方案1-根据公司现有的pc端项目去做整理归纳" aria-hidden="true">#</a> 方案1.根据公司现有的PC端项目去做整理归纳</h4><p>因为是针对新技术栈的模板，所以无法根据历史项目（vue2）去抽取模板，且未来都会基于vue3+ts生态开发新项目。</p><p>如果是根据现在进行的基于新技术栈开发的PC端项目（<code>基础数据服务</code> 和 <code>睿云管理后台</code>）去抽取的话：</p><hr><p>优:</p><ol><li>更贴合业务的开发模版</li><li>开发人员更熟悉</li></ol><hr><p>劣:</p><ol><li>有试错成本（新技术栈的试错）</li><li>随着项目去走，抽取的周期会长</li></ol><h4 id="方案2-找到成熟稳定的开源项目来抽取模板" tabindex="-1"><a class="header-anchor" href="#方案2-找到成熟稳定的开源项目来抽取模板" aria-hidden="true">#</a> 方案2.找到成熟稳定的开源项目来抽取模板，</h4><p>有一个稳定的项目且基于新技术栈开发，对于新技术不熟悉的开发人员都是不错的参考。</p><ol><li>可以参考更好的方法函数封装（例如基于ts的axios封装请求库）</li><li>可以参考更全面的TS封装和写法指导</li><li>可以参考一些业务场景的解决方案</li></ol><p>但是如何评价这个项目的代码质量或者封装抽取组件思维是否达标，也是仁者见仁，更多的还需要不断的深入才能给出答案。</p><p>个人认为：有这么一个项目存在，现阶段来说是利大于弊的。可以在过渡阶段起到较大的作用。也能帮助提升形成模板的效率。且随着新技术栈的开发经验提升，也可以不断优化模板。</p><h3 id="基于第2种方案" tabindex="-1"><a class="header-anchor" href="#基于第2种方案" aria-hidden="true">#</a> 基于第2种方案</h3><p>基于第二种方案的尝试，有以下这些模板，技术栈和当前的<code>基础数据服务</code> 和 <code>睿云管理后台</code>两个项目匹配，UI库的不同不影响基础模版。</p><h4 id="vue-vben-admin开源模板-vite-vue3-ant-design-vue-typescript-pinia" tabindex="-1"><a class="header-anchor" href="#vue-vben-admin开源模板-vite-vue3-ant-design-vue-typescript-pinia" aria-hidden="true">#</a> vue-vben-admin开源模板（Vite, Vue3, Ant-Design-Vue, TypeScript, Pinia）</h4>',23)),i("ul",null,[i("li",null,[i("a",h,[e[0]||(e[0]=n("完整版Github")),a(r)])]),i("li",null,[i("a",p,[e[1]||(e[1]=n("精简版Github")),a(r)])]),i("li",null,[i("a",v,[e[2]||(e[2]=n("完整版演示地址")),a(r)])]),i("li",null,[i("a",b,[e[3]||(e[3]=n("中文文档地址")),a(r)])])]),e[11]||(e[11]=t('<blockquote><p>区分完整版和精简版，完整版功能更多，插件更多；精简版可根据自己的需求添加插件</p></blockquote><h5 id="文档层面" tabindex="-1"><a class="header-anchor" href="#文档层面" aria-hidden="true">#</a> 文档层面</h5><p>有介绍较全的中文文档，覆盖了从浅到深的介绍。</p><p>有演示站点，方便调试</p><h5 id="源码层面" tabindex="-1"><a class="header-anchor" href="#源码层面" aria-hidden="true">#</a> 源码层面</h5><p>项目在持续的更新，文件层级清晰，源码部分有注释</p><h5 id="其他点" tabindex="-1"><a class="header-anchor" href="#其他点" aria-hidden="true">#</a> 其他点</h5><ul><li>Issues较多（主要集中在功能问题）</li><li>UI库是基于Ant Design</li></ul><h4 id="vue-pure-admin开源模板-vite-vue3-typescript-tailwind-css-element-plus" tabindex="-1"><a class="header-anchor" href="#vue-pure-admin开源模板-vite-vue3-typescript-tailwind-css-element-plus" aria-hidden="true">#</a> vue-pure-admin开源模板（Vite, Vue3, TypeScript, Tailwind CSS, element-plus）</h4>',9)),i("ul",null,[i("li",null,[i("a",c,[e[4]||(e[4]=n("完整版Github")),a(r)])]),i("li",null,[i("a",f,[e[5]||(e[5]=n("精简版Github")),a(r)])]),i("li",null,[i("a",m,[e[6]||(e[6]=n("完整版演示地址")),a(r)])]),i("li",null,[i("a",x,[e[7]||(e[7]=n("中文文档地址")),a(r)])])]),e[12]||(e[12]=i("p",null,"在文档/源码层面大同小异",-1)),e[13]||(e[13]=i("h5",{id:"亮点",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#亮点","aria-hidden":"true"},"#"),n(" 亮点")],-1)),e[14]||(e[14]=i("ol",null,[i("li",null,[n("使用了"),i("code",null,"Tailwind CSS"),n(",对css这块有一定的参考价值")])],-1)),e[15]||(e[15]=i("h4",{id:"vue-naive-admin开源模板-vite-vue-3-pinia-naive-ui",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#vue-naive-admin开源模板-vite-vue-3-pinia-naive-ui","aria-hidden":"true"},"#"),n(" vue-naive-admin开源模板（Vite, Vue 3, Pinia, Naive UI）")],-1)),i("ul",null,[i("li",null,[i("a",_,[e[8]||(e[8]=n("Github")),a(r)])]),i("li",null,[i("a",g,[e[9]||(e[9]=n("中文文档地址")),a(r)])])]),e[16]||(e[16]=t('<h5 id="亮点-1" tabindex="-1"><a class="header-anchor" href="#亮点-1" aria-hidden="true">#</a> 亮点</h5><ol><li>相对精简，适用于中小型项目</li><li>原子化 css 解决方案</li></ol><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h3><ol><li>我们现阶段目标，是生成一个PC端的基础模版，这样在未来的新项目就可以应用起来且可以不断丰富。</li><li><code>基础数据服务</code> 和 <code>睿云管理后台</code> 已经在进行开发中，结合方案1和方案2，基于这两个项目再配合参考 上述<code>vue-vben-admin</code>等模板 ，可以较全面且快速的生成一个基础试错模板。</li><li>对<code>vue-vben-admin</code>等模板保持借鉴参考的态度，取其精华去其糟粕。</li></ol>',4))])}const S=l(u,[["render",k],["__file","关于推进PC端项目模板统一方案整理.html.vue"]]);export{S as default};
