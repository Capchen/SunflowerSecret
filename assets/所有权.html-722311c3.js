const e=JSON.parse('{"key":"v-3ca0af05","path":"/Rust/%E6%89%80%E6%9C%89%E6%9D%83.html","title":"所有权","lang":"zh-CN","frontmatter":{"description":"所有权 所有权规则： Each value in Rust has an owner. There can only be one owner at a time. When the owner goes out of scope, the value will be dropped. 堆栈 栈中的所有数据都必须占用已知且固定的大小 因为指向放入堆中数据的指针是已知的并且大小是固定的，你可以将该指针存储在栈上，不过当需要实际数据时，必须访问指针","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/SunflowerSecret/Rust/%E6%89%80%E6%9C%89%E6%9D%83.html"}],["meta",{"property":"og:site_name","content":"Cap"}],["meta",{"property":"og:title","content":"所有权"}],["meta",{"property":"og:description","content":"所有权 所有权规则： Each value in Rust has an owner. There can only be one owner at a time. When the owner goes out of scope, the value will be dropped. 堆栈 栈中的所有数据都必须占用已知且固定的大小 因为指向放入堆中数据的指针是已知的并且大小是固定的，你可以将该指针存储在栈上，不过当需要实际数据时，必须访问指针"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Cap"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"所有权\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cap\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"堆栈","slug":"堆栈","link":"#堆栈","children":[]},{"level":2,"title":"二次释放 double free","slug":"二次释放-double-free","link":"#二次释放-double-free","children":[]},{"level":2,"title":"引用","slug":"引用","link":"#引用","children":[]},{"level":2,"title":"Dangling References","slug":"dangling-references","link":"#dangling-references","children":[]}],"readingTime":{"minutes":1.88,"words":565},"filePathRelative":"Rust/所有权.md","excerpt":"<h1> 所有权</h1>\\n<p>所有权规则：</p>\\n<ol>\\n<li>Each value in Rust has an owner.</li>\\n<li>There can only be one owner at a time.</li>\\n<li>When the owner goes out of scope, the value will be dropped.</li>\\n</ol>\\n<h2> 堆栈</h2>\\n<ol>\\n<li>栈中的所有数据都必须占用已知且固定的大小</li>\\n<li>因为指向放入堆中数据的指针是已知的并且大小是固定的，你可以将该指针存储在栈上，不过当需要实际数据时，必须访问指针</li>\\n</ol>","autoDesc":true}');export{e as data};
