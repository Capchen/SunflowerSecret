import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as t,c as o,a,b as n,e as r,d as l}from"./app-62e25a33.js";const c={},i=a("blockquote",null,[a("p",null,"了解Vue的底层架构，是为非web领域提供Vue能力的大前提。Vue核心分为三大块：core，compiler，platform")],-1),d={href:"https://juejin.im/post/5cef749451882530810e0626#heading-8",target:"_blank",rel:"noopener noreferrer"},u=l(`<h2 id="core" tabindex="-1"><a class="header-anchor" href="#core" aria-hidden="true">#</a> core</h2><p>core的作用是依据模板生成对应的虚拟节点——vnode，而后通过diff算法更新视图。所以可以根据生成的vnode，变成你想要的任何东西，不仅仅是在web平台的dom节点。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/297368/1560759707817-e6b12cd5-3e82-4495-9846-3f7b5c9e324b.png#height=259&amp;id=BmMCi&amp;originHeight=259&amp;originWidth=789&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=0&amp;status=done&amp;style=none&amp;title=&amp;width=789" alt="" loading="lazy"></p><h3 id="挂载" tabindex="-1"><a class="header-anchor" href="#挂载" aria-hidden="true">#</a> 挂载</h3><p>在web平台来说，指的是将生成的dom节点，append到指定的元素节点上。我们可以看到在web平台的项目中main.js中的一段代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  router<span class="token punctuation">,</span>
  store<span class="token punctuation">,</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是一个挂载操作，使用render方法生成对应的vnode，然后根据vnode生成指定平台（这里是web平台）的元素，然后append到app节点上。</p><h3 id="指令" tabindex="-1"><a class="header-anchor" href="#指令" aria-hidden="true">#</a> 指令</h3><p>vue中的指令区分为编译时处理和运行时处理这两类，像 <code>v-for</code> 和 <code>v-if</code> 这些是编译时使用，在render生成vnode时就会生效</p><h3 id="vnode" tabindex="-1"><a class="header-anchor" href="#vnode" aria-hidden="true">#</a> VNode</h3><p>vnode是依据模板生成的虚拟节点，每一个元素对应一个vnode</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;box&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;onClick&quot;</span><span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>对应一个vnode
    <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;content&quot;</span><span class="token operator">&gt;</span>哈哈<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>对应一个vnode
    <span class="token operator">&lt;</span>TestComps<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>TestComps<span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>自定义组件同样对应一个vnode
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>对应一个vnode
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先是经过vue的complie模块生成render函数，然后执行render函数方法，生成vnode结构。如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//这里我只列出关键的vnode信息</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">attr</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">staticClass</span><span class="token operator">:</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">on</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">click</span><span class="token operator">:</span>onClick<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">tag</span><span class="token operator">:</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">attr</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">staticClass</span><span class="token operator">:</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">on</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
      <span class="token literal-property property">tag</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">text</span><span class="token operator">:</span><span class="token string">&#39;哈哈&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">tag</span><span class="token operator">:</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">attr</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">on</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">tag</span><span class="token operator">:</span><span class="token string">&#39;TestComps&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">attr</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">hook</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">init</span><span class="token operator">:</span>fn<span class="token punctuation">,</span>           
            <span class="token literal-property property">prepatch</span><span class="token operator">:</span>fn<span class="token punctuation">,</span>
            <span class="token literal-property property">insert</span><span class="token operator">:</span>fn<span class="token punctuation">,</span>
           <span class="token literal-property property">destroy</span><span class="token operator">:</span>fn
        <span class="token punctuation">}</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>  
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据vnode关系，可以很清晰区分子节点和父节点。</p><h3 id="vm" tabindex="-1"><a class="header-anchor" href="#vm" aria-hidden="true">#</a> vm</h3><p>在vue中vm是组件实例。是对应一个自定义组件的，即只有自定义组件才有vm。</p><h3 id="nexttick" tabindex="-1"><a class="header-anchor" href="#nexttick" aria-hidden="true">#</a> nextTick</h3><p>在下一个事件循环执行，老版本的vue实现的方式是通过mutationsObserve监听dom变化来响应的，现在2.5+版本则是在promise不支持的情况下使用messageChannel方式（它输入宏任务macrotask）</p><h3 id="watcher" tabindex="-1"><a class="header-anchor" href="#watcher" aria-hidden="true">#</a> watcher</h3><p>一个组件对应一个watcher,被观察的对象包括data,props,watch方法中的值，当被观察的对象发生变化的时候，会触发render函数生成新的vnode，然后通过diff算法以最小的代价更新视图。<br><img src="https://cdn.nlark.com/yuque/0/2019/webp/297368/1560765258435-1ea9f026-aede-4a67-ae1e-c40de9771637.webp#height=250&amp;id=C3l8y&amp;originHeight=250&amp;originWidth=780&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=0&amp;status=done&amp;style=none&amp;title=&amp;width=780" alt="" loading="lazy"></p><blockquote><p><strong>整个watcher体系的建立过程</strong>：</p><ol><li>创建组件实例的时候会对data和props进行observer，</li><li>对传入的props进行浅遍历，重新设定属性的属性描述符get和set，如果props的某个属性值为对象，那么这个对象在父组件是被深度observe过的，所以props是浅遍历</li><li>observer会深度遍历data，对data所包含属性重新定义，即defineReactive，重新设定属性描述符的get和set</li><li>在mountComponent的时候，会new Wacther，当前watcher实例会被pushTarget，设定为目标watcher，然后执行<code>vm._update(vm._render(), hydrating)</code>，执行render函数导致属性的get函数被调用，每个属性会对应一个dep实例，在这个时候，dep实例关联到组件对应的watcher，实现依赖收集，关联后popTarget。</li><li>如果有子组件，会导致子组件的实例化，重新执行上述步骤</li></ol></blockquote><h3 id="vnode-diff-算法" tabindex="-1"><a class="header-anchor" href="#vnode-diff-算法" aria-hidden="true">#</a> vnode diff 算法</h3><h2 id="complier" tabindex="-1"><a class="header-anchor" href="#complier" aria-hidden="true">#</a> complier</h2><p>complier的作用是负责对模板编译，生成render和staticRender函数,这两个函数会生成vnode，给core使用</p><blockquote><p>template ==&gt; AST ==&gt; 递归ATS生成render和staticRender ==&gt; VNode<br> template =&gt; parse(正则匹配,AST) =&gt; optimize(标注静态节点) =&gt; generate(生成render) =&gt; 运行render function =&gt; VNode</p></blockquote><h2 id="platform" tabindex="-1"><a class="header-anchor" href="#platform" aria-hidden="true">#</a> platform</h2><blockquote><p>platform模块与具体平台相关，我们可以在这里定义平台相关接口传入runtime和compile，以实现具体平台的定制化，因此为其他平台带来Vue能力，大部分工作在这里。</p></blockquote>`,27);function k(v,m){const s=e("ExternalLinkIcon");return t(),o("div",null,[i,a("p",null,[n("原文地址："),a("a",d,[n("https://juejin.im/post/5cef749451882530810e0626#heading-8"),r(s)])]),u])}const g=p(c,[["render",k],["__file","vue底层架构笔记.html.vue"]]);export{g as default};
