import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as l,d as a}from"./app-f9308750.js";const r={},s=a('<h2 id="bundless" tabindex="-1"><a class="header-anchor" href="#bundless" aria-hidden="true">#</a> bundless</h2><p>依据浏览器支持的ESM模块，去分别拉取对应的文件</p><ul><li>冷启动快（使用esbuild-golang语言）</li><li>热更新快</li></ul><h2 id="创建构建流程" tabindex="-1"><a class="header-anchor" href="#创建构建流程" aria-hidden="true">#</a> 创建构建流程</h2><ol><li>创建koa服务</li><li>使用chokidar监听文件</li><li>模块解析</li><li>增加各种中间件</li><li>启动服务</li></ol><h2 id="静态文件托管" tabindex="-1"><a class="header-anchor" href="#静态文件托管" aria-hidden="true">#</a> 静态文件托管</h2><ol><li>Vite会利用serverStaticPlugin将src和public目录设置为静态目录</li><li>serverStaticPlugin利用koa的koa-etag中间件打tag</li><li>devServer具备静态文件服务功能</li></ol><h2 id="模块路径重写" tabindex="-1"><a class="header-anchor" href="#模块路径重写" aria-hidden="true">#</a> 模块路径重写</h2><ol><li>处理裸导入： <code>import vue from vue</code> ，浏览器识别不了(只能识别相对路径或者绝对路径)</li><li>对于非JS的请求路径，加上import参数</li></ol><h2 id="静态资源打包策略" tabindex="-1"><a class="header-anchor" href="#静态资源打包策略" aria-hidden="true">#</a> 静态资源打包策略</h2><ol><li>获取vue内容，分别识别是否有template/style部分，有的话就发起请求</li></ol><h3 id="css打包策略" tabindex="-1"><a class="header-anchor" href="#css打包策略" aria-hidden="true">#</a> CSS打包策略</h3><ol><li>判断是否是.css文件的请求</li><li>判断是否为js中的import css</li><li>进行预编译处理</li><li>基于css的源码包装成js模块</li><li>创建style标签将css代码插入dom</li><li>判断是否开启css module，是则导出对象否则导出css代码</li></ol><h3 id="模板打包策略" tabindex="-1"><a class="header-anchor" href="#模板打包策略" aria-hidden="true">#</a> 模板打包策略</h3><ol><li>使用compiler-dom编译template ，然后返回浏览器</li></ol>',15),d=[s];function t(o,h){return i(),l("div",null,d)}const u=e(r,[["render",t],["__file","vite.html.vue"]]);export{u as default};
