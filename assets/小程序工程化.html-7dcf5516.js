import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as n,c as t,e,a,b as l,d as h,w as s}from"./app-b3a5d769.js";const p={};function u(f,i){const r=d("RouterLink");return n(),t("div",null,[i[5]||(i[5]=e('<p>如何推进小程序的工程化，其实就是如何在前端工程化的各个环节去推进小程序的工程化，沉淀出一套可复用的体系。</p><p>原则就是基于现状，先思考是否需要，再逐步推进；先解决有无，再解决好坏。</p><h2 id="前端工程化" tabindex="-1"><a class="header-anchor" href="#前端工程化" aria-hidden="true">#</a> 前端工程化</h2><ol><li>规范化</li><li>版本控制与协作</li><li>模块化与组件化</li><li>工具化</li><li>自动化测试</li><li>持续集成</li><li>监控与告警</li></ol><p>从开发到上线的链路来看，小程序和一般的web项目还是稍有些不同的。懂得都懂。这里随便列举几个点</p><ul><li>开发工具需要使用微信开发者工具</li><li>小程序的发布需要走小程序的发布流程且包大小有限制</li><li>小程序的开发版/体验版/正式版</li></ul><h2 id="规范化" tabindex="-1"><a class="header-anchor" href="#规范化" aria-hidden="true">#</a> 规范化</h2><ol><li>制定代码规范</li><li>制定组件规范</li><li>制定项目规范</li></ol>',8)),a("p",null,[i[1]||(i[1]=l("上篇")),h(r,{to:"/MiniProgram/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%80%BB%E7%BB%93%E6%A2%B3%E7%90%86.html"},{default:s(()=>i[0]||(i[0]=[l("《小程序的总结梳理》")])),_:1}),i[2]||(i[2]=l("中有提到，小程序的技术栈是Taro，DSL是Vue3")),i[3]||(i[3]=a("br",null,null,-1)),i[4]||(i[4]=l(" 那么我们就可以沿用前端的代码规范和组件规范，这点是降低了开发人员的心智负担。"))]),i[6]||(i[6]=e('<p>项目规范的不同，主要是小程序有小程序的开发规范，这点需要开发人员去遵守。</p><h2 id="版本控制与协作" tabindex="-1"><a class="header-anchor" href="#版本控制与协作" aria-hidden="true">#</a> 版本控制与协作</h2><ol><li>版本控制</li><li>协作规范</li></ol><p>这点也是沿用前端团队的协作规范，如果Git分支管理，Commit Message规范，Code Review规范，都是沿用的前端团队的规范。</p><h2 id="模块化与组件化" tabindex="-1"><a class="header-anchor" href="#模块化与组件化" aria-hidden="true">#</a> 模块化与组件化</h2><ol><li>模块化</li><li>组件化</li></ol><p>这点的规范也是大同小异，不同点主要是需要遵循小程序的规范去实现模块化和组件化。例如分包，npm包的规范等。</p><h2 id="工具化" tabindex="-1"><a class="header-anchor" href="#工具化" aria-hidden="true">#</a> 工具化</h2><p>工具化，个人觉得是贯穿整个前端工程化的，从项目初始化到项目上线，都需要工具化的支持。</p><ol><li>脚手架</li><li>构建工具</li><li>调试工具</li><li>测试工具</li><li>发布工具</li></ol><h2 id="自动化测试" tabindex="-1"><a class="header-anchor" href="#自动化测试" aria-hidden="true">#</a> 自动化测试</h2><ol><li>单元测试</li><li>性能测试</li><li>安全测试</li></ol><p>这个点，目前我们团队还没有开展，后续会考虑开展。个人觉得是个痛点，做好了，对提升项目的稳定性，对测试团队的效率提升，都是有很大的帮助的。</p><h2 id="持续集成" tabindex="-1"><a class="header-anchor" href="#持续集成" aria-hidden="true">#</a> 持续集成</h2><ol><li>代码提交</li><li>代码发布</li></ol><p>基于Taro提供一定的打包构建能力，我们团队目前是基于Jenkins的CI/CD + miniprogram-ci 来实现的</p><h2 id="监控与告警" tabindex="-1"><a class="header-anchor" href="#监控与告警" aria-hidden="true">#</a> 监控与告警</h2><ol><li>监控</li><li>告警</li></ol><p>基于阿里云的ARMS去展开。</p>',19))])}const b=o(p,[["render",u],["__file","小程序工程化.html.vue"]]);export{b as default};
