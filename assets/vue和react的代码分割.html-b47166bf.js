import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c,a as n,b as s,e as t,d as r}from"./app-bd208569.js";const l={},i=n("h3",{id:"vue中的代码分割-路由懒加载",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vue中的代码分割-路由懒加载","aria-hidden":"true"},"#"),s(" vue中的代码分割（路由懒加载）")],-1),u=n("p",null,"结合异步组件和webpack的代码分割功能来实现路由组件的懒加载",-1),k={href:"https://router.vuejs.org/zh/guide/advanced/lazy-loading.html",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,[s("首先，将异步组件定义为返回一个Promise的工厂函数"),n("br"),n("code",null,"const foo = () => Promise.resolve({ /*组件定义对象*/ })"),s(" "),n("br"),s(" 然后根据webpack代码分割规则，定义分割点"),n("br"),n("code",null,"import('./Foo.vue')"),s("  // 返回Promise")],-1),m=n("br",null,null,-1),v=n("code",null,"import()",-1),b={href:"https://github.com/tc39/proposal-dynamic-import",target:"_blank",rel:"noopener noreferrer"},h=n("br",null,null,-1),_={href:"https://babeljs.io/docs/plugins/syntax-dynamic-import/",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"syntax-dynamic-import",-1),f=r(`<p>结合这两者，这就是如何定义一个能够被 Webpack 自动代码分割的异步组件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./Foo.vue&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="react中的代码分割" tabindex="-1"><a class="header-anchor" href="#react中的代码分割" aria-hidden="true">#</a> react中的代码分割</h3><h4 id="基于路由的代码拆分" tabindex="-1"><a class="header-anchor" href="#基于路由的代码拆分" aria-hidden="true">#</a> 基于路由的代码拆分</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense<span class="token punctuation">,</span> lazy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./routes/Home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> About <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./routes/About&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>Router<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码是路由和lazy配合拆分的示例，和vue的方式大同小异<br> lazy函数的作用就是允许渲染动态导入为常规组件。<br> Suspense组件的作用就是类似于骨架屏或者加载指示符，在等待加载的时候出现。</p>`,6),y=n("br",null,null,-1),w=n("code",null,"React.lazy",-1),x={href:"https://github.com/smooth-code/loadable-components",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/smooth-code/loadable-components/blob/master/packages/server/README.md",target:"_blank",rel:"noopener noreferrer"},S=n("br",null,null,-1);function R(j,q){const a=e("ExternalLinkIcon");return p(),c("div",null,[i,u,n("blockquote",null,[n("p",null,[s("链接地址 "),n("a",k,[s("https://router.vuejs.org/zh/guide/advanced/lazy-loading.html"),t(a)])])]),d,n("blockquote",null,[n("p",null,[s("注意:"),m,s(" 动态 "),v,s(" 语法是ECMAScript（JavaScript）"),n("a",b,[s("提案"),t(a)]),s("，目前不是语言标准的一部分。预计在不远的将来会被接受。")])]),n("blockquote",null,[n("p",null,[s("注意"),h,s(" 如果您使用的是 Babel，你将需要添加 "),n("a",_,[g,t(a)]),s(" 插件，才能使 Babel 可以正确地解析语法")])]),f,n("blockquote",null,[n("p",null,[s("注意："),y,w,s(" 和 Suspense 尚不可用于服务器端渲染。如果要在服务器渲染的应用程序中进行代码拆分，我们建议使用 "),n("a",x,[s("Loadable Components"),t(a)]),s(" 。它有一个很好的"),n("a",z,[s("服务器端渲染打包拆分指南"),t(a)]),s("。"),S,s(" 并且lazy只支持默认导出，并不支持命名导出，想要命名导出那就as defalut")])])])}const E=o(l,[["render",R],["__file","vue和react的代码分割.html.vue"]]);export{E as default};
