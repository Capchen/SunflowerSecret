import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as e,d as s}from"./app-5e1a2f66.js";const i={},t=s(`<h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景：</h3><p>H5聊天机器人配置功能，希望在demo-test环境中生效，但是暂时还不希望跟着BF2.1.4版本。demo-test环境又是和2.1.4版本同步的，所以如果要在两个环境中差别维护H5配置这个功能,在升级或更新时需要额外的精力对这个模块做处理。所以希望通过能否在部署工程中配置个开关，对这个功能部署时控制是否展示。</p><h3 id="技术实现原理" tabindex="-1"><a class="header-anchor" href="#技术实现原理" aria-hidden="true">#</a> 技术实现原理：</h3><p>原理和设置nginx配置文件一样，前端先定好一个模版，通过变量注入的方式来获取对应变量值。理解前端工程从构建到启动容器这个阶段，就很好理解这种实现方式。</p><h3 id="文件说明" tabindex="-1"><a class="header-anchor" href="#文件说明" aria-hidden="true">#</a> 文件说明：</h3><h4 id="common-variable-js-template" tabindex="-1"><a class="header-anchor" href="#common-variable-js-template" aria-hidden="true">#</a> common_variable.js.template</h4><p>获取配置变量的模版文件，和nginx.conf.template在同一目录下，这个文件的作用就是作为一个js文件在项目加载的时候一起加载，定义为一个自执行函数，如下图：把获取到ADMIN_IS_OPEN_H5_CHATBOT变量放入到deployVariable对象中，并且将对象挂载到window下。这样在项目中就可以通过访问window.deployerVariable访问到想要的变量。且deployerVariable为只读。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/297368/1600227029044-3abfa65c-aa67-407a-a267-9cad05a59a01.png#align=left&amp;display=inline&amp;height=202&amp;name=image.png&amp;originHeight=404&amp;originWidth=1000&amp;size=57857&amp;status=done&amp;style=none&amp;width=500" alt="image.png" loading="lazy"></p><h4 id="run-nginx-sh" tabindex="-1"><a class="header-anchor" href="#run-nginx-sh" aria-hidden="true">#</a> run_nginx.sh</h4><p>这个文件是启动容器时执行的一个脚本。通过执行这个文件，将配置变量传给nginx文件。如下图：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/297368/1600227373479-edf149a8-1ce4-454a-b595-edfa191fd60c.png#align=left&amp;display=inline&amp;height=497&amp;name=image.png&amp;originHeight=994&amp;originWidth=864&amp;size=139034&amp;status=done&amp;style=none&amp;width=432" alt="image.png" loading="lazy"><br> 意思是以nginx.conf.template为模版文件写入nginx.conf文件，并且将前缀为$$ 的变量注入，这样在nginx.conf.template文件中定义的同名变量就能被在部署工程中定义的具体的值取代。</p><h4 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a> Dockerfile</h4><p>打包docker镜像的配置文件，里面定义基础镜像，切换工作目录，拷贝文件等操作步骤。</p><h4 id="index-html" tabindex="-1"><a class="header-anchor" href="#index-html" aria-hidden="true">#</a> index.html</h4><p>前端单页面应用的入口文件，一切的起源。包括我们的公共组件，element，vue都是通过这个文件加载。如下图：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/297368/1600227832447-5aa44d39-53c9-46d2-80b0-09991d96cc6b.png#align=left&amp;display=inline&amp;height=457&amp;name=image.png&amp;originHeight=914&amp;originWidth=1578&amp;size=252472&amp;status=done&amp;style=none&amp;width=789" alt="image.png" loading="lazy"></p><h3 id="操作步骤" tabindex="-1"><a class="header-anchor" href="#操作步骤" aria-hidden="true">#</a> 操作步骤：</h3><p>我们涉及到修改的就是以上四个文件</p><h4 id="第一步" tabindex="-1"><a class="header-anchor" href="#第一步" aria-hidden="true">#</a> 第一步：</h4><p>在docker/data/conf文件夹下增加common_variable.js.template文件，这个模板文件代码如上。需要添加变量的话只要在</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> deployVariable <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token constant">ADMIN_IS_OPEN_H5_CHATBOT</span><span class="token operator">:</span> <span class="token string">&quot;\${ADMIN_IS_OPEN_H5_CHATBOT}&quot;</span>
        <span class="token comment">//在这里添加新的变量，如:需要添加is_open_image</span>
      	<span class="token constant">ADMIN_IS_OPEN_IMAGE</span><span class="token operator">:</span> <span class="token string">&quot;...&quot;</span>
    <span class="token punctuation">}</span>
    Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>deployVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    window<span class="token punctuation">.</span>deployVariable <span class="token operator">=</span> deployVariable
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;deployVariable&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第二步" tabindex="-1"><a class="header-anchor" href="#第二步" aria-hidden="true">#</a> 第二步：</h4><p>在Dockerfile文件中加入<br><img src="https://cdn.nlark.com/yuque/0/2020/png/297368/1600238533099-95fdfc2c-c34c-4471-bec2-0842dc58ecea.png#align=left&amp;display=inline&amp;height=287&amp;name=image.png&amp;originHeight=574&amp;originWidth=1562&amp;size=117100&amp;status=done&amp;style=none&amp;width=781" alt="image.png" loading="lazy"><br> Dockerfile的执行是在run_nginx.sh脚本之前，加入这一行的目的为了将我们的模板文件，拷贝到docker容器的相关目录下，为下一步做准备。</p><h4 id="第三步" tabindex="-1"><a class="header-anchor" href="#第三步" aria-hidden="true">#</a> 第三步：</h4><p>在run_nginx.sh脚本中加入如下代码<br><img src="https://cdn.nlark.com/yuque/0/2020/png/297368/1600238748977-04c5c64f-6f8f-4900-abfe-74ea826e6390.png#align=left&amp;display=inline&amp;height=378&amp;name=image.png&amp;originHeight=756&amp;originWidth=1512&amp;size=113623&amp;status=done&amp;style=none&amp;width=756" alt="image.png" loading="lazy"><br> 如上，在运行run_nginx.sh脚本的时候，会先把工作目录切换到前端静态资源的目录 <code>dist/static/js</code><br> 如果已经存在common_variable.js文件会先删除，然后使用 <code>envsubst</code> 注入部署工程的变量，以template模板文件在目标目录生成common_variable.js文件。<br> 这时在common_variable.js文件中，你在template文件中设置的变量占位符就会替换成部署工程中的具体的值。</p><h4 id="第四步" tabindex="-1"><a class="header-anchor" href="#第四步" aria-hidden="true">#</a> 第四步：</h4><p>index.html文件加入如下代码<br><img src="https://cdn.nlark.com/yuque/0/2020/png/297368/1600239187818-20cfd5a8-d841-4057-a3f1-8aaaadb13277.png#align=left&amp;display=inline&amp;height=266&amp;name=image.png&amp;originHeight=532&amp;originWidth=1548&amp;size=178712&amp;status=done&amp;style=none&amp;width=774" alt="image.png" loading="lazy"><br> 上面三部我们做的操作是：在前端静态资源构建完成之后，利用模板文件在 <code>static/js</code> 目录下生成了真正的common_variabel.js文件，而部署工程的变量就是在生成真正的js文件的时候注入的（和生成真正的nginx配置文件一样的原理）。<br> 这一步我们就是使用这个文件，作为资源在html文件中加载。加载完之后，就可以在window上看到deployVariable这个属性了。然后在项目中需要的地方拿来用就好了</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结：</h3><p>一句话概括：我们就是先把部署工程的变量拿到放在一个js文件中，然后再通过项目加载这个js文件来将变量挂载到window上。这样我们就可以在项目中使用这些变量。<br> 目前在general-ui的patch/2.1.4上已经更新。</p><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题：</h3><p>目前暴露出的问题且可优化的点：<br> 1.这个js文件不经过webpack打包，是个没有经过混淆和压缩的&#39;明文&#39;代码<br> 2.在更新变量状态部署之后，需要重新刷新浏览器生效，因为依赖于文件是否执行<br> ...</p>`,28),p=[t];function o(r,c){return n(),e("div",null,p)}const m=a(i,[["render",o],["__file","前端项目获取部署工程environment配置选项值可行方案一.html.vue"]]);export{m as default};
