import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as d,c as h,a as e,e as t}from"./app-14dc0570.js";const o={};function s(p,a){const i=r("Mermaid");return d(),h("div",null,[a[0]||(a[0]=e('<h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> 进程</h2><p>浏览器是多进程架构，相比于单进程架构</p><ul><li>有数据隔离的能力</li><li>有多核优势</li><li>各司其职，互不影响。单页面崩溃不会影响其他页面</li></ul><h3 id="包含的进程" tabindex="-1"><a class="header-anchor" href="#包含的进程" aria-hidden="true">#</a> 包含的进程</h3><ol><li><p>Browser进程</p><p>主进程</p></li><li><p>插件进程</p><p>插件管理</p></li><li><p>GPU进程</p></li><li><p>渲染进程（浏览器内核）</p></li></ol><p>每个tab一个进程</p><h2 id="渲染进程" tabindex="-1"><a class="header-anchor" href="#渲染进程" aria-hidden="true">#</a> 渲染进程</h2><p>每个进程内部有多个线程，展开渲染进程:</p><ol><li>GUI渲染线程</li><li>JS引擎线程</li><li>事件触发线程</li><li>定时触发线程</li><li>异步http请求线程</li></ol><h3 id="gui渲染线程与js引擎线程互斥" tabindex="-1"><a class="header-anchor" href="#gui渲染线程与js引擎线程互斥" aria-hidden="true">#</a> GUI渲染线程与JS引擎线程互斥</h3><p>道理就是js可以操作dom，dom没确定，是不会去渲染页面。</p><p>让我为您解释主流浏览器刷新频率为60Hz这个概念，以及它与浏览器渲染和JavaScript脚本执行的关系。</p><h2 id="理解屏幕刷新频率与gui渲染和js引擎的关系" tabindex="-1"><a class="header-anchor" href="#理解屏幕刷新频率与gui渲染和js引擎的关系" aria-hidden="true">#</a> 理解屏幕刷新频率与GUI渲染和JS引擎的关系</h2><h3 id="理解60hz刷新频率" tabindex="-1"><a class="header-anchor" href="#理解60hz刷新频率" aria-hidden="true">#</a> 理解60Hz刷新频率</h3><p>60Hz的刷新频率意味着浏览器每秒会更新或&quot;刷新&quot;屏幕60次。这就是说，理想情况下，每16.67毫秒（1000ms / 60 ≈ 16.67ms）会发生一次屏幕更新。</p><h3 id="浏览器渲染过程" tabindex="-1"><a class="header-anchor" href="#浏览器渲染过程" aria-hidden="true">#</a> 浏览器渲染过程</h3><p>浏览器的渲染过程通常包括以下步骤：</p><ul><li>样式计算</li><li>布局</li><li>绘制</li><li>合成</li></ul><p>这个过程被称为&quot;渲染管道&quot;或&quot;像素管道&quot;。</p><h3 id="渲染与60hz刷新率的关系" tabindex="-1"><a class="header-anchor" href="#渲染与60hz刷新率的关系" aria-hidden="true">#</a> 渲染与60Hz刷新率的关系</h3><p>为了保持流畅的用户体验，浏览器需要在每次屏幕刷新之前完成一次完整的渲染过程。这就意味着所有的计算、布局和绘制操作理想情况下应该在16.67ms内完成。</p><p>让我们用一个图表来说明这个过程：</p>',22)),t(i,{id:"mermaid-148",code:"eJylWN1q40YUvt+nUFkW7JIR/omdWIZeLBRKKbTQ3PRyLI2lweMZMTN2nJjAQgt1adkslLbb3rQLhfRq2S20m7ZLn6Zy8hg9Gkm2lbVkJauAIjTn55vz882Rl3+cX18soh9/W17+vvz52/8uH3cbH5xGi1fL719cPf7S9sQxZwJ7iLqCW/N71sblTqQS0rFCQbkmsp9b1BJzNRRyjISkPuWO5ZK81Nnq6YYXG0spjlGIpb7h0Rilmgowt3JgNex2RwGaAXXRgJxSImvxqz1YaMW35n5873XqeYS3gjiYaA1eA6xqebR1JxBTIkv2sFemPBTuRKEpVXTASNVArICnUWBYk89qqGl3wtnGJtfo74+JHGPqIY9iX+Ixkgej/flQcI2GeEzZiTPFsoaQeeMTqjRSYLfeNy8UPSVOsxXO+kPKmHO/Ya7+2Varlk0AtDQbmCfynU4Lrh3ymsx0Xl5pKUZkt7rnE6QD6o44UQpxCAtm80QZHVNPB04ToFdUN0957XYc1nL9EGuoG46UYNTLtD2sAkggPnFKYpX3TnlaCXkEjSTwXHBSDUfsmmwB0q6oLuD/FvXiJIyxHBGZ5q/b7a6SFz+XK9muFEqlzkoV1NS/Q80WGAvn4D5u+uLkMDwgrIpHVzDgwV194bKJgvAiY9baqPd2uzgveSUVYj5Pvd1OC/Y7wO7Il2LCPZSYMNwB5AKkVx4DA3avICkxpBwvVIsGFx6xJHGL7CYCLpUuI6UihDEaqnKZULATX/ByGayDdCOEkFUB93q99LkCmUB0/QAoCMztjlzidkNuHt8Q5m4A8RtTz2PF7Z7ojoD4Z5vI44hnyNfPFZBvYElhMOpzJz0Qy7Sg2IC+cExa6UCQzQNFWuZUCwj2PlkDh2ouK+iYnmJpyzab3SSL3BZbdqNkk0Mmjl3gMo0Y5RnLJ1aqEexHJj5vNNJxQDXpVw/bytS2rkyM7VaNe2cuQuxSDSeM3ekXWDI7Kzdq0v5w5L8JRvoDXGt1YJZa38BXfRfzJOiM60CxWgO0HuxZvUO712p2uofd1kHnQX1VqQeN+K96sWZObsehVdnTo1M7XTgSgmkazkORTp14AEf8ZGuyx3iWFWEjLsIQex7lvmPmplufWutMmACiZjeLYdtOeiW+IIYDIT0i43BZZvqwsmgmC0hij06UQZH2JSJTQKySaj+FmcMjM6dZQtWrtjmimpGjAqba2MBh1VFxe0NC0dWSKIHoCdpvNOpZrVQojmSqKODcCovWu0lJbUPxDh2HQmoMB2YJ1g2p0o4rgFFyZMRL7+n1kbv2PmBQMDnXqwYulCgCt669Ahhxc9uSwGcH9IQKaGgY6aGY3URlaKeST6hI4DEwUXRYwmgqKXxIEZB5Hwp4a5KanWrh3zT2sefdHbbJI3Al15jywsIy8cKuFumEXObpreoKuij7dLijBUcKoecIZYsVmOssev0ouvg6/sHgpy+iywur1hir+od4ij91JQ318quL62ffLH95Fb0+v37+7Or5D9Hl59HLR1f/PI0Wf0ZPFsvFk+XTf69+/TtavIhenkd/fWfVml27ewBm7v0PuyDomA=="}),a[1]||(a[1]=e('<h3 id="javascript执行与60hz刷新率" tabindex="-1"><a class="header-anchor" href="#javascript执行与60hz刷新率" aria-hidden="true">#</a> JavaScript执行与60Hz刷新率</h3><p>JavaScript的执行也需要在这个16.67ms的时间窗口内完成，以避免影响下一帧的渲染。如果JavaScript执行时间过长，可能会导致丢帧，造成页面卡顿。</p><h3 id="实际影响" tabindex="-1"><a class="header-anchor" href="#实际影响" aria-hidden="true">#</a> 实际影响</h3><ul><li>动画效果：为了实现流畅的动画，每一帧的变化都应该在16.67ms内完成。这就是为什么我们经常听到&quot;60fps（每秒60帧）&quot;这个术语。</li><li>事件处理：对用户输入的响应也应该在一帧之内完成，以确保用户感受不到延迟。</li><li>长任务优化：任何超过50ms的任务都被认为是&quot;长任务&quot;，可能会导致用户体验问题。</li></ul><h3 id="优化策略" tabindex="-1"><a class="header-anchor" href="#优化策略" aria-hidden="true">#</a> 优化策略</h3><p>为了配合60Hz的刷新频率，开发者可以采取以下策略：</p><ul><li>使用<code>requestAnimationFrame</code>来调度动画，确保动画更新与屏幕刷新同步。</li><li>将复杂的计算任务分解成小块，使用<code>setTimeout</code>或<code>requestIdleCallback</code>来调度，避免阻塞主线程。</li><li>使用Web Workers来执行耗时的JavaScript操作，不影响主线程的渲染。</li></ul><p>总结来说，理解60Hz刷新频率对于优化web应用的性能和用户体验至关重要。它为我们提供了一个清晰的目标：确保每16.67ms内完成所有必要的计算和渲染工作，以实现流畅的用户界面。</p>',8))])}const m=l(o,[["render",s],["__file","浏览器进程与线程.html.vue"]]);export{m as default};
