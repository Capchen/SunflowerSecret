import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as r,c as s,a as e,b as a,e as n,d as i}from"./app-b178b6af.js";const c={},o=i('<h1 id="cross-site-scripting-跨站脚本攻击" tabindex="-1"><a class="header-anchor" href="#cross-site-scripting-跨站脚本攻击" aria-hidden="true">#</a> Cross-site scripting(跨站脚本攻击)</h1><h3 id="背景和现状" tabindex="-1"><a class="header-anchor" href="#背景和现状" aria-hidden="true">#</a> 背景和现状</h3><p>当网景（Netscape）最初推出JavaScript语言时，他们也察觉到准许网页服务器传送可执行的程式码给一个浏览器的安全风险（即使仅是在一个浏览器的沙盒里）。它所造成的一个关键的问题在于使用者同时开启多个浏览器视窗时，在某些例子里，网页里的片断程式码被允许从另一个网页或物件取出资料，而因为恶意的网站可以用这个方法来尝试窃取机密资讯，所以在某些情形，这应是完全被禁止的。为了解决这个问题，浏览器采用了同源决策——仅允许来自相同网域名称系统和使用相同协定的物件与网页之间的任何互动。</p><p>XSS漏洞可以追溯到1990年代。大量的网站曾遭受XSS漏洞攻击或被发现此类漏洞，如Twitter，Facebook，MySpace，Orkut ,新浪微博和百度贴吧 。研究表明，最近几年XSS已经超过缓冲区溢出成为最流行的攻击方式，有68%的网站可能遭受此类攻击。根据开放网页应用安全计划（Open Web Application Security Project）公布的2010年统计数据，在Web安全威胁前10位中，XSS排名第2，仅次于代码注入（Injection）。</p><h3 id="什么是xss" tabindex="-1"><a class="header-anchor" href="#什么是xss" aria-hidden="true">#</a> 什么是XSS</h3><p>Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。它允许攻击者规避同源策略,利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java，VBScript，ActiveX，Flash或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h3><figure><img src="https://gyenno-test.oss-cn-beijing.aliyuncs.com/pub/miniprogram/demo-test/cross-site-scripting.svg" alt="work" tabindex="0" loading="lazy"><figcaption>work</figcaption></figure><p>不仅仅是业务上的“用户的 UGC 内容”可以进行注入，包括 URL 上的参数等都可以是攻击的来源。在处理输入时，以下内容都不可信：</p><ul><li>来自用户的 UGC 信息</li><li>来自第三方的链接</li><li>URL 参数</li><li>POST 参数</li><li>Referer （可能来自不可信的来源）</li><li>Cookie （可能来自其他子域注入）</li></ul><h3 id="演示环节" tabindex="-1"><a class="header-anchor" href="#演示环节" aria-hidden="true">#</a> 演示环节</h3><p>举一个🌰</p><p>vue中的v-html</p><p><code>&lt;a href=&quot;javascript:alert(&#39;XSS&#39;)&quot;&gt;Money&lt;/a&gt;</code></p><h3 id="注入方法" tabindex="-1"><a class="header-anchor" href="#注入方法" aria-hidden="true">#</a> 注入方法</h3><ul><li>在 HTML 中内嵌的文本中，恶意内容以 script 标签形成注入。</li><li>在内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）。</li><li>在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签。</li><li>在标签的 href、src 等属性中，包含 javascript: 等可执行代码。</li><li>在 onload、onerror、onclick 等事件中，注入不受控制代码。</li><li>在 style 属性和标签中，包含类似 background-image:url(&quot;javascript:...&quot;); 的代码（新版本浏览器已经可以防范）。</li><li>在 style 属性和标签中，包含类似 expression(...) 的 CSS 表达式代码（新版本浏览器已经可以防范）。</li></ul><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><h4 id="存储型xss-stored-xss" tabindex="-1"><a class="header-anchor" href="#存储型xss-stored-xss" aria-hidden="true">#</a> 存储型XSS(Stored XSS)</h4><p>恶意脚本来自数据库</p>',19),h={href:"https://portswigger.net/web-security/cross-site-scripting/stored/lab-html-context-nothing-encoded",target:"_blank",rel:"noopener noreferrer"},u=i(`<p>存储型 XSS 的攻击步骤：</p><ol><li>攻击者将恶意代码提交到目标网站的数据库中。</li><li>用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ol><p>这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。</p><h4 id="反射行xss-reflected-xss" tabindex="-1"><a class="header-anchor" href="#反射行xss-reflected-xss" aria-hidden="true">#</a> 反射行XSS(Reflected XSS)</h4><p>恶意脚本来自当前的http请求</p><p>假设一个网站有一个搜索功能，它接收用户在 URL 参数中提供的搜索词：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://www.website.com/search?value=gift
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>应用程序会在对此 URL 的响应中回显所提供的搜索词：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;p&gt;搜索关键词: gift&lt;/p&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果将搜索词变成一段脚本</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://www.website.com/search?value=&lt;script&gt;do something&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),p={href:"https://portswigger.net/web-security/cross-site-scripting/reflected/lab-html-context-nothing-encoded",target:"_blank",rel:"noopener noreferrer"},v=i(`<p>反射型 XSS 的攻击步骤：</p><ol><li>攻击者构造出特殊的 URL，其中包含恶意代码。</li><li>用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ol><blockquote><p>反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。</p></blockquote><blockquote><p>反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。</p></blockquote><blockquote><p>POST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见。</p></blockquote><h4 id="dom型xss-dom-based-xss" tabindex="-1"><a class="header-anchor" href="#dom型xss-dom-based-xss" aria-hidden="true">#</a> DOM型XSS(DOM-based XSS)</h4><p>漏洞存在于客户端代码而不是服务器端代码中。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
  &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id=&quot;safe&quot;&gt;我的银行卡密码是123456&lt;/div&gt;
  &lt;input id=&quot;demo&quot;&gt;&lt;/input&gt;
  &lt;button id=&quot;btn&quot;&gt;搜索&lt;/button&gt;
  &lt;div id=&quot;content&quot; style=&quot;min-height: 20px;&quot;&gt;&lt;/div&gt;
  &lt;script&gt;
    // 获取url参数
    function getUrlParam(name) {
      const reg = new RegExp(&#39;(^|&amp;)&#39; + name + &#39;=([^&amp;]*)(&amp;|$)&#39;)
      const r = window.location.search.substr(1).match(reg)
      if (r != null) return unescape(r[2])
      return null
    }
    const data = getUrlParam(&#39;value&#39;)
    if (data) {
      const div = document.querySelector(&#39;#content&#39;)
      div.innerHTML = data
    }
    const btn = document.querySelector(&#39;#btn&#39;)
    const demo = document.querySelector(&#39;#demo&#39;)
    btn.addEventListener(&#39;click&#39;, () =&gt; {
      const value = demo.value
      window.location.href = \`demo.html?value=\${value}\`
    })
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DOM 型 XSS 的攻击步骤：</p><ol><li>攻击者构造出特殊的 URL，其中包含恶意代码。</li><li>用户打开带有恶意代码的 URL。</li><li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ol><p>DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。</p><h2 id="检测方法" tabindex="-1"><a class="header-anchor" href="#检测方法" aria-hidden="true">#</a> 检测方法</h2><h3 id="工具扫描" tabindex="-1"><a class="header-anchor" href="#工具扫描" aria-hidden="true">#</a> 工具扫描</h3><h4 id="w3af" tabindex="-1"><a class="header-anchor" href="#w3af" aria-hidden="true">#</a> w3af</h4><h4 id="nikto" tabindex="-1"><a class="header-anchor" href="#nikto" aria-hidden="true">#</a> nikto</h4><h3 id="手动检测" tabindex="-1"><a class="header-anchor" href="#手动检测" aria-hidden="true">#</a> 手动检测</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jaVasCript:/*-/*\`/*\\\`/*&#39;/*&quot;/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//&lt;/stYle/&lt;/titLe/&lt;/teXtarEa/&lt;/scRipt/--!&gt;\\x3csVg/&lt;sVg/oNloAd=alert()//&gt;\\x3e
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="预防措施" tabindex="-1"><a class="header-anchor" href="#预防措施" aria-hidden="true">#</a> 预防措施</h2><p>从上面三种类型的xss攻击方式中，我们可以看出：</p><ul><li>恶意代码被提交到后端</li><li>浏览器执行了恶意代码</li></ul><h3 id="阻止恶意代码被提交到后端-输入过滤转义" tabindex="-1"><a class="header-anchor" href="#阻止恶意代码被提交到后端-输入过滤转义" aria-hidden="true">#</a> （阻止恶意代码被提交到后端）--&gt; 输入过滤转义</h3><h4 id="前端进行过滤" tabindex="-1"><a class="header-anchor" href="#前端进行过滤" aria-hidden="true">#</a> 前端进行过滤</h4><p>可行，但是如果绕过前端直接请求接口，还是可以提交恶意代码。</p><h4 id="后端进行过滤" tabindex="-1"><a class="header-anchor" href="#后端进行过滤" aria-hidden="true">#</a> 后端进行过滤</h4><p>可行，但是要确保，消费数据的端能够正常解析转义后的内容。</p><p>例如，浏览器可以直接渲染转义后的<code>&amp;lt; </code>,<br> 但是在vue模版中，<code>&amp;lt; </code>被认为是个字符串。</p><p>所以数据消费，有一定的心智负担。</p><h3 id="阻止浏览器执行恶意代码-防止html中出现注入" tabindex="-1"><a class="header-anchor" href="#阻止浏览器执行恶意代码-防止html中出现注入" aria-hidden="true">#</a> （阻止浏览器执行恶意代码）--&gt; 防止HTML中出现注入</h3><h4 id="reflected-xss-stored-xss" tabindex="-1"><a class="header-anchor" href="#reflected-xss-stored-xss" aria-hidden="true">#</a> Reflected XSS/ Stored XSS</h4><ul><li>纯前端渲染</li></ul><p>浏览器直接明确渲染方式，例如innerText,避免使用innerHtml，v-html</p><ul><li><p>转义HTML</p><p>有时候确实要拼接HTML，使用转义库。</p></li></ul><h4 id="dom-xss" tabindex="-1"><a class="header-anchor" href="#dom-xss" aria-hidden="true">#</a> Dom XSS</h4><ul><li><p>避免使用v-html，innerHTML，outerHTML，</p></li><li><p>避免将不可信数据直接应用于内联事件监听器，如href，onload，onclick等</p></li></ul><h3 id="内容安全策略-csp" tabindex="-1"><a class="header-anchor" href="#内容安全策略-csp" aria-hidden="true">#</a> 内容安全策略（CSP）</h3>`,35);function m(b,g){const t=d("ExternalLinkIcon");return r(),s("div",null,[o,e("p",null,[e("a",h,[a("演示地址"),n(t)])]),u,e("p",null,[e("a",p,[a("演示地址"),n(t)])]),v])}const f=l(c,[["render",m],["__file","XSS.html.vue"]]);export{f as default};
