import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,d as o}from"./app-199cbfb1.js";const l={},r=o('<h2 id="文件模块" tabindex="-1"><a class="header-anchor" href="#文件模块" aria-hidden="true">#</a> 文件模块</h2><p>node引入模块三个步骤：</p><ol><li>路径解析</li><li>文件定位</li><li>编译执行</li></ol><hr><p>例如require(&#39;element&#39;) 时，在node_modules中找到的是个文件夹，node会将目录当一个包来处理。<br> （查找的兜底是index文件名）</p><ol><li>在当前目录下找到package.json</li><li>通过JSON.parse()解析出包描述对象，从中取出main属性制定的文件名</li></ol><hr><h2 id="异步i-o" tabindex="-1"><a class="header-anchor" href="#异步i-o" aria-hidden="true">#</a> 异步I/O</h2><h3 id="系统的异步io" tabindex="-1"><a class="header-anchor" href="#系统的异步io" aria-hidden="true">#</a> 系统的异步io</h3><p>非阻塞i/o会让CPU处理状态判断。通过轮询处理<br> 轮询的演进：</p><ol><li>read</li><li>select</li><li>poll</li><li>epoll</li></ol><p>通过线程池来完成异步I/O</p><h3 id="node的异步io" tabindex="-1"><a class="header-anchor" href="#node的异步io" aria-hidden="true">#</a> node的异步io</h3><p>在进程启动的时候，node便会创建一个类似while(true)的循环，每一次循环为一次tick</p>',14),d=[r];function n(t,h){return i(),a("div",null,d)}const _=e(l,[["render",n],["__file","深入浅出.html.vue"]]);export{_ as default};
