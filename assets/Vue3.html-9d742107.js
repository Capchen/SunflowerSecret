import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as e,a as t}from"./app-a7d0c61b.js";const p={};function o(c,n){return s(),e("div",null,n[0]||(n[0]=[t(`<h2 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> tree-shaking</h2><h2 id="fragments碎片" tabindex="-1"><a class="header-anchor" href="#fragments碎片" aria-hidden="true">#</a> fragments碎片</h2><h2 id="vite" tabindex="-1"><a class="header-anchor" href="#vite" aria-hidden="true">#</a> vite</h2><p>基于网络请求的依赖加载</p><h2 id="composition-api" tabindex="-1"><a class="header-anchor" href="#composition-api" aria-hidden="true">#</a> composition API</h2><ul><li>2.X 基于选项的api（options API）</li><li>3.X 基于函数的api<br> -- 类型支持<br> -- 压缩友好</li></ul><p>现有api不影响，<br> 共存，组件的封装和架构会更友好</p><p>单文件组件太大，不容易切分</p><h2 id="动机" tabindex="-1"><a class="header-anchor" href="#动机" aria-hidden="true">#</a> 动机</h2><h3 id="逻辑复用模式" tabindex="-1"><a class="header-anchor" href="#逻辑复用模式" aria-hidden="true">#</a> 逻辑复用模式</h3><p>在vue2中（options api）：</p><ul><li>当一个组件中使用了多个mixin的时候光看模版很难分清一个属性来自哪一个</li><li>命名空间冲突，多个开发者无法保证属性或者方法名不重复</li><li>性能方面，高阶组件和无状态组件都需要额外创建组件实例来封装逻辑</li></ul><h2 id="now" tabindex="-1"><a class="header-anchor" href="#now" aria-hidden="true">#</a> now</h2><p>composition api 组合式api<br> composition function 组合函数<br> function-based api 基于函数的api，使用基于函数的api将相关联的代码抽取到一个组合函数中，该函数封装了相关联的逻辑，并将需要暴露给组件的状态以响应式的数据源方式返回出来。<br> e.g</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX
    y<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY
  <span class="token punctuation">}</span>
  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在组件中使用该函数</span>
<span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 与其它函数配合使用</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> z <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useOtherLogic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;{{ x }} {{ y }} {{ z }}&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>组合函数useMouse里面就有很多基于函数的api，然后将状态x，y返回出来，组件里面就可以用了</p></blockquote><h2 id="setup函数" tabindex="-1"><a class="header-anchor" href="#setup函数" aria-hidden="true">#</a> setup函数</h2><p>这一个新引入的组件选项，它会在一个组件实例被创建时，初始化了props之后调用。会将接受到的props作为参数</p><h2 id="ref函数" tabindex="-1"><a class="header-anchor" href="#ref函数" aria-hidden="true">#</a> ref函数</h2><p>如果我们想在setup内部创建一个被管理的值。可以使用ref函数，它返回的是一个包装对象。<br> 包装函数包装str和num这些基本类型是为了能更好追踪它们的变化。如果一个函数返回的是1这个数字，接收到这个数值的代码只会获得一个值。<br> 包装函数去包装对象或是数组也是有意义的。他可以让我们替换整个对象的值<br> e.g</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 替代原数组，但引用不变</span>
numbers<span class="token punctuation">.</span>value <span class="token operator">=</span> numbers<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当包装对象被暴露给模版渲染上下文，或是被嵌套在另一个响应式对象中的时候，它会被自动展开 (unwrap) 为内部的值。</p></blockquote><h2 id="watchers" tabindex="-1"><a class="header-anchor" href="#watchers" aria-hidden="true">#</a> Watchers</h2><p>和 2.x 的 $watch 有所不同的是，watch() 的回调会在创建时就执行一次。这有点类似 2.x watcher 的 immediate: true 选项，但有一个重要的不同：默认情况下 watch() 的回调总是会在当前的 renderer flush 之后才被调用 —— 换句话说，watch()的回调在触发时，DOM 总是会在一个已经被更新过的状态下。 这个行为是可以通过选项来定制的。</p><blockquote><p>在 2.x 的代码中，我们经常会遇到同一份逻辑需要在 mounted 和一个 watcher 的回调中执行（比如根据当前的 id 抓取数据），3.0 的 watch() 默认行为可以直接表达这样的需求。</p></blockquote><p>观察多个数据源的时候只要任意一个数据源改变都会出发回调</p><h3 id="停止观察" tabindex="-1"><a class="header-anchor" href="#停止观察" aria-hidden="true">#</a> 停止观察</h3><p><code>watch()</code>返回的是一个停止观察的函数</p><h3 id="清理副作用" tabindex="-1"><a class="header-anchor" href="#清理副作用" aria-hidden="true">#</a> 清理副作用</h3><p>watch的回调函数支持传入第三个参数。这第三个参数是一个用来注册清理操作的函数。调用这个函数会注册一个清理函数。</p><blockquote><p>什么情况下会用到清理函数？比如当一个异步操作还没没完成，观测的数据就变化了。我们可能要撤销还在等待结果的前一个操作。</p></blockquote><h4 id="和react对比" tabindex="-1"><a class="header-anchor" href="#和react对比" aria-hidden="true">#</a> 和react对比</h4><p>react的<code>useEffect</code>方法是直接返回一个清理函数。但是vue没有，而是采用传入注册函数来注册清理函数，是因为vue的watch回调中往往是异步操作，而异步的async函数返回的是个promise，这无法保证需要一个立刻注册的清理函数。</p><h4 id="watcher-回调的调用时机" tabindex="-1"><a class="header-anchor" href="#watcher-回调的调用时机" aria-hidden="true">#</a> Watcher 回调的调用时机</h4><p>默认情况下，所有的 watcher 回调都会在当前的 renderer flush 之后被调用。这确保了在回调中 DOM 永远都已经被更新完毕。如果你想要让回调在 DOM 更新之前或是被同步触发，可以使用 flush 选项：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">count changed</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">flush</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token comment">// default, fire after renderer flush</span>
    <span class="token literal-property property">flush</span><span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">,</span> <span class="token comment">// fire right before renderer flush</span>
    <span class="token literal-property property">flush</span><span class="token operator">:</span> <span class="token string">&#39;sync&#39;</span> <span class="token comment">// fire synchronously</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="强调点" tabindex="-1"><a class="header-anchor" href="#强调点" aria-hidden="true">#</a> 强调点</h2><p>Vue 的 setup() 每个组件实例只会在初始化时调用一次 ，状态通过引用储存在 setup() 的闭包内。</p>`,38)]))}const u=a(p,[["render",o],["__file","Vue3.html.vue"]]);export{u as default};
