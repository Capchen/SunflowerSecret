import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as r,a as c}from"./app-9c4d859b.js";const o={};function i(p,e){return t(),r("div",null,e[0]||(e[0]=[c('<h1 id="理解" tabindex="-1"><a class="header-anchor" href="#理解" aria-hidden="true">#</a> 理解</h1><h2 id="react-哲学" tabindex="-1"><a class="header-anchor" href="#react-哲学" aria-hidden="true">#</a> React 哲学</h2><blockquote><p>React 可以改变你对可见设计和应用构建的思考。当你使用 React 构建用户界面时，你首先会把它分解成一个个 组件，然后，你需要把这些组件连接在一起，使数据流经它们。</p></blockquote><p>从它的哲学：一个个组件，我们可以扩展出两个需要思考的性能问题：</p><ol><li>大量组件下，如何保证用户界面的流程构建</li><li>在依赖网络请求的情况下，如何加快组件的获取</li></ol><p>带着问题，我们去看React如何解决</p><h2 id="大量组件-cpu瓶颈" tabindex="-1"><a class="header-anchor" href="#大量组件-cpu瓶颈" aria-hidden="true">#</a> 大量组件（CPU瓶颈）</h2><p>这里的瓶颈要理解，是在持续渲染的过程中的瓶颈。初始渲染（首屏优化）需要从另一个方向去思考。</p><p>已知：页面渲染需要经过GUI线程，JS线程。两者是互斥的。如果js执行时间多于一帧的时间，给用户的感知就是页面卡顿了。</p><p>Fiber方案：在浏览器每一帧的时间中，预留一些时间给 JS 线程，React利用这部分时间更新组件（可以看到，在源码中，预留的初始时间是 5ms）。</p><blockquote><p>任何超过50ms的任务都被认为是&quot;长任务&quot;，可能会导致用户体验问题</p></blockquote><p>关键就是：</p>',12)]))}const n=a(o,[["render",i],["__file","核心理念.html.vue"]]);export{n as default};
