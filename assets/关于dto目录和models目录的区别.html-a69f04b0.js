import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as d,c,e as t}from"./app-b3a5d769.js";const s={};function l(r,o){return d(),c("div",null,o[0]||(o[0]=[t("<p><strong><code>models</code> 目录和 <code>dto</code> 目录的主要区别在于:</strong></p><ul><li><strong><code>models</code> 目录:</strong> 通常用于定义与数据库表或业务实体一一对应的模型类。这些类通常包含与业务逻辑相关的所有属性和方法。</li><li><strong><code>dto</code> 目录:</strong> 通常用于定义用于数据传输的对象。这些类通常只包含数据本身，不包含任何业务逻辑。</li></ul><p><strong>以下是一些更具体的区别:</strong></p><ul><li><strong>粒度:</strong> <code>models</code> 目录中的模型类通常粒度更细，每个类对应一个具体的数据库表或业务实体。<code>dto</code> 目录中的 DTO 类粒度通常更粗，一个 DTO 类可以包含多个数据库表或业务实体的数据。</li><li><strong>职责:</strong> <code>models</code> 目录中的模型类通常负责与数据库交互，并封装业务逻辑。<code>dto</code> 目录中的 DTO 类只负责数据传输，不包含任何业务逻辑。</li><li><strong>使用场景:</strong> <code>models</code> 目录中的模型类通常在业务层使用。<code>dto</code> 目录中的 DTO 类通常在表现层和数据访问层使用。</li></ul><p><strong>以下是一些示例:</strong></p><ul><li><strong><code>models</code> 目录:</strong><ul><li><code>User.model.ts</code>：定义用户模型，包含 <code>id</code>、<code>username</code>、<code>password</code> 等属性和方法。</li><li><code>Order.model.ts</code>：定义订单模型，包含 <code>id</code>、<code>user_id</code>、<code>product_id</code> 等属性和方法。</li></ul></li><li><strong><code>dto</code> 目录:</strong><ul><li><code>LoginDto.ts</code>：用于登录时传输的数据，包含 <code>username</code> 和 <code>password</code> 属性。</li><li><code>OrderDto.ts</code>：用于展示订单信息的数据，包含 <code>id</code>、<code>user_name</code>、<code>product_name</code> 等属性。</li></ul></li></ul><p><strong>总之，<code>models</code> 目录和 <code>dto</code> 目录是两个不同的概念，它们在项目中扮演着不同的角色。将它们区分开来可以提高代码的清晰度和可维护性。</strong></p>",7)]))}const _=e(s,[["render",l],["__file","关于dto目录和models目录的区别.html.vue"]]);export{_ as default};
