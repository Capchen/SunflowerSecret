import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as l,a as s,b as n,d as r,e as i}from"./app-91cf2080.js";const c="/SunflowerSecret/assets/image-4505f20c.png",u={},d={href:"https://www.apollographql.com/docs/federation/quickstart/local-composition",target:"_blank",rel:"noopener noreferrer"};function h(v,a){const e=t("ExternalLinkIcon");return o(),l("div",null,[a[1]||(a[1]=s('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>阿波罗联邦是一种架构模式</p><figure><img src="'+c+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p>如上图，以一个router为入口，多个子图组成了一个supergraph。</p><p>每个子图不限技术栈，不限团队。</p><h3 id="router" tabindex="-1"><a class="header-anchor" href="#router" aria-hidden="true">#</a> Router</h3><p>Router其实是一个服务，也可以包含鉴权、缓存、日志等功能，可以看成一个api gateway。</p><p>可以通过GraphOS去使用它</p><p>也可以下载它的二进制文件，去本地运行它（当然，需要一些额外配置）</p><h3 id="子图" tabindex="-1"><a class="header-anchor" href="#子图" aria-hidden="true">#</a> 子图</h3><p>每个子图其实就是一个grapgql service 实例。里面需要实现对应的resolvers</p><p>如上描述，子图可以使用任意的兼容的 GraphQL 服务器库。不限于javascript、java、py等</p><h2 id="router实现" tabindex="-1"><a class="header-anchor" href="#router实现" aria-hidden="true">#</a> router实现</h2><p>基于apollo下，router的实现有两种选择</p><ul><li><p>Apollo Router</p></li><li><p>基于Apollo Service 的<code>@apollo/gateway</code>库</p></li></ul><p>第二种方式没啥好说的，就是按照<code>@apollo/gateway</code>的方式来组装，看文档编写。</p><p>如果要使用第一种，官方推荐是使用Apollo GraphOS + Apollo Router 这种方式去管理超图和子图（虽然方便但是要$），其实就是购买saas服务，虽然有免费版本。</p><p>想使用Apollo Router但是不想依赖GraphOS，希望本地去运营的，有没有其他方法？</p><p>答案是： 有</p>',19)),n("p",null,[n("a",d,[a[0]||(a[0]=r("Local composition")),i(e)])]),a[2]||(a[2]=s(`<h2 id="the-rover-cli" tabindex="-1"><a class="header-anchor" href="#the-rover-cli" aria-hidden="true">#</a> The Rover CLI</h2><p>Rover 是用于使用 Apollo GraphOS 管理和维护图形的命令行界面。</p><p>它能够通过声明的yaml文件，去组装一个超图。并输出对应的超图yaml</p><h2 id="supergraph的本地生成" tabindex="-1"><a class="header-anchor" href="#supergraph的本地生成" aria-hidden="true">#</a> supergraph的本地生成</h2><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># supergraph-config.yaml</span>
<span class="token key atrule">federation_version</span><span class="token punctuation">:</span> <span class="token number">2</span>
<span class="token key atrule">subgraphs</span><span class="token punctuation">:</span>
  <span class="token key atrule">locations</span><span class="token punctuation">:</span>
    <span class="token key atrule">routing_url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//flyby<span class="token punctuation">-</span>locations<span class="token punctuation">-</span>sub.herokuapp.com/
    <span class="token key atrule">schema</span><span class="token punctuation">:</span>
      <span class="token key atrule">subgraph_url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//flyby<span class="token punctuation">-</span>locations<span class="token punctuation">-</span>sub.herokuapp.com/
  <span class="token key atrule">reviews</span><span class="token punctuation">:</span>
    <span class="token key atrule">routing_url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//flyby<span class="token punctuation">-</span>reviews<span class="token punctuation">-</span>sub.herokuapp.com/
    <span class="token key atrule">schema</span><span class="token punctuation">:</span>
      <span class="token key atrule">subgraph_url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//flyby<span class="token punctuation">-</span>reviews<span class="token punctuation">-</span>sub.herokuapp.com/

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rover的运行需要如上面的yaml，可以看到其中声明了subgraphs集合及对应的路径。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rover supergraph compose <span class="token parameter variable">--config</span> ./supergraph-config.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行了<code>supergraph compose</code>命令去进行组装操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./router <span class="token parameter variable">--supergraph</span><span class="token operator">=</span>supergraph.graphql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以生成的超图作为配置文件运行Apollo Router的二进制文件就好了。</p><h2 id="subgraph的实现" tabindex="-1"><a class="header-anchor" href="#subgraph的实现" aria-hidden="true">#</a> subgraph的实现</h2><p>到此，我们知道了Router的使用，以及如何构造一个超图。但是我们还不知道子图是怎么来的。我们只知道子图是一个Apollo Service 及一个长成这样的<code>https://flyby-locations-sub.herokuapp.com/</code>URL链接</p><p>接着往下看</p><h3 id="基于apollo-server构造" tabindex="-1"><a class="header-anchor" href="#基于apollo-server构造" aria-hidden="true">#</a> 基于Apollo Server构造</h3><p>构造一个subgraph服务，需要依赖<code>@apollo/subgraph</code>和<code>graphql-tag</code>库，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @apollo/subgraph graphql-tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后转化类型和Query</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> typeDefs <span class="token operator">=</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  type Book {
    title: String
    author: String
  }

  type Query {
    books: [Book]
  }
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我们将模式包装在 gql 标签中，将其转换为 AST（即 DocumentNode）。我们这样做是因为下面的 buildSubgraphSchema 函数要求我们传入的模式是 DocumentNode 类型</p></blockquote><p>然后创建server</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  schema<span class="token operator">:</span> <span class="token function">buildSubgraphSchema</span><span class="token punctuation">(</span><span class="token punctuation">{</span> typeDefs<span class="token punctuation">,</span> resolvers <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>上面一套下来，实现的就是</p><p>基于本地Apollo Router去实现的联邦模式</p><p>当然，细节问题需要进一步处理。</p>`,25))])}const b=p(u,[["render",h],["__file","Apollo.html.vue"]]);export{b as default};
