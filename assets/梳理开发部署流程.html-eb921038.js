const e=JSON.parse('{"key":"v-1149c22a","path":"/Docker/%E6%A2%B3%E7%90%86%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B.html","title":"梳理开发部署流程","lang":"zh-CN","frontmatter":{"title":"梳理开发部署流程","shortTitle":"","description":"本地开发 在本地开发中，是先运行deploy/dev下的run_ui.sh 这个shell命令的作用是配置好nginx，使用docker-compose配置文件的方式，本地起一个docker容器 接着起本地项目，然后实现本地开发 docker-compose： 我们知道使用一个&nbsp;Dockerfile&nbsp;模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。 Compose&nbsp;恰好满足了这样的需求。它允许用户通过一个单独的&nbsp;docker-compose.yml&nbsp;模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。","icon":"","author":{"name":"Cap"},"isOriginal":true,"date":"2020-05-22T00:00:00.000Z","category":"","tag":"docker","sticky":1,"star":false,"article":true,"timeline":true,"image":"","editLink":false,"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Docker/%E6%A2%B3%E7%90%86%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Cap"}],["meta",{"property":"og:title","content":"梳理开发部署流程"}],["meta",{"property":"og:description","content":"本地开发 在本地开发中，是先运行deploy/dev下的run_ui.sh 这个shell命令的作用是配置好nginx，使用docker-compose配置文件的方式，本地起一个docker容器 接着起本地项目，然后实现本地开发 docker-compose： 我们知道使用一个&nbsp;Dockerfile&nbsp;模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。 Compose&nbsp;恰好满足了这样的需求。它允许用户通过一个单独的&nbsp;docker-compose.yml&nbsp;模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Cap"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:published_time","content":"2020-05-22T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"梳理开发部署流程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cap\\"}]}"]]},"headers":[{"level":3,"title":"本地开发","slug":"本地开发","link":"#本地开发","children":[]},{"level":3,"title":"技能平台vue-cli3与2的打包对比","slug":"技能平台vue-cli3与2的打包对比","link":"#技能平台vue-cli3与2的打包对比","children":[]},{"level":3,"title":"新流程","slug":"新流程","link":"#新流程","children":[]}],"readingTime":{"minutes":1.29,"words":387},"filePathRelative":"Docker/梳理开发部署流程.md","localizedDate":"2020年5月22日","excerpt":"<h3> 本地开发</h3>\\n<p>在本地开发中，是先运行deploy/dev下的run_ui.sh<br>\\n这个shell命令的作用是配置好nginx，使用docker-compose配置文件的方式，本地起一个docker容器<br>\\n接着起本地项目，然后实现本地开发</p>\\n<h4> docker-compose：</h4>\\n<p>我们知道使用一个&nbsp;<code>Dockerfile</code>&nbsp;模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。<br>\\n<code>Compose</code>&nbsp;恰好满足了这样的需求。它允许用户通过一个单独的&nbsp;<code>docker-compose.yml</code>&nbsp;模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p>","autoDesc":true}');export{e as data};
