const e=JSON.parse('{"key":"v-0f011f0e","path":"/Other/Set%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3.html","title":"Set数据类型相关","lang":"zh-CN","frontmatter":{"title":"Set数据类型相关","shortTitle":"","description":"类似于数组，但是值都是唯一的。 const a = new Set([1,2,3,3,4]) Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality” 了解下各比较算法 1.比较熟悉的 == 和 ===，前者会在类型不相等时，依据规则进行类型转换。而后者则是不允许类型转化来比较。 2. Object.is()&nbsp;方法也是比较两者是否相等，它使用的是**SameValue算法。**与 == 和 ===的区别如下 Object.is(NaN, NaN) // true Object.is(0,-0) // false Object.is(null, null) // true NaN === NaN // false null === null // true 0 === -0 // true","icon":"","author":{"name":"Cap"},"isOriginal":true,"date":"2019-06-14T00:00:00.000Z","category":"","tag":"javascript","sticky":1,"star":false,"article":true,"timeline":true,"image":"","editLink":false,"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Other/Set%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3.html"}],["meta",{"property":"og:site_name","content":"Cap"}],["meta",{"property":"og:title","content":"Set数据类型相关"}],["meta",{"property":"og:description","content":"类似于数组，但是值都是唯一的。 const a = new Set([1,2,3,3,4]) Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality” 了解下各比较算法 1.比较熟悉的 == 和 ===，前者会在类型不相等时，依据规则进行类型转换。而后者则是不允许类型转化来比较。 2. Object.is()&nbsp;方法也是比较两者是否相等，它使用的是**SameValue算法。**与 == 和 ===的区别如下 Object.is(NaN, NaN) // true Object.is(0,-0) // false Object.is(null, null) // true NaN === NaN // false null === null // true 0 === -0 // true"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Cap"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2019-06-14T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Set数据类型相关\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-06-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cap\\"}]}"]]},"headers":[],"readingTime":{"minutes":1.06,"words":317},"filePathRelative":"Other/Set数据类型相关.md","localizedDate":"2019年6月14日","excerpt":"<p>类似于数组，但是值都是唯一的。<br>\\n<code>const a = new Set([1,2,3,3,4])</code></p>\\n<h5> Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”</h5>\\n<p>了解下各比较算法</p>\\n<p>1.比较熟悉的 == 和 ===，前者会在类型不相等时，依据规则进行类型转换。而后者则是不允许类型转化来比较。<br>\\n2. <code>Object.is()</code>&nbsp;方法也是比较两者是否相等，它使用的是**SameValue算法。**与 == 和 ===的区别如下</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code>Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">is</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">NaN</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">NaN</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// true</span>\\nObject<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">is</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// false</span>\\nObject<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">is</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// true</span>\\n<span class=\\"token number\\">NaN</span> <span class=\\"token operator\\">===</span> <span class=\\"token number\\">NaN</span> <span class=\\"token comment\\">// false</span>\\n<span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">null</span> <span class=\\"token comment\\">// true</span>\\n<span class=\\"token number\\">0</span> <span class=\\"token operator\\">===</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">0</span> <span class=\\"token comment\\">// true</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
