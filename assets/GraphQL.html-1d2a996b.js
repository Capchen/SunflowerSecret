import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as l,a,b as s,e,d as t}from"./app-7f508e17.js";const i="/SunflowerSecret/assets/image-58445986.png",c="/SunflowerSecret/assets/image-1-45e7d6b1.png",u="/SunflowerSecret/assets/image-3-440f7ff0.png",d="/SunflowerSecret/assets/image-4-89837779.png",h="/SunflowerSecret/assets/image-2-19088a74.png",k="/SunflowerSecret/assets/image-6-10154b9f.png",v={},m=t('<h2 id="初识" tabindex="-1"><a class="header-anchor" href="#初识" aria-hidden="true">#</a> 初识</h2><h3 id="nestjs" tabindex="-1"><a class="header-anchor" href="#nestjs" aria-hidden="true">#</a> NestJS</h3><p>nestjs是一个Node服务器端的企业级框架。</p><p>内置了graphql模块，提供对graphql的支持。</p><p>同时也依赖了@nestjs/apollo包，对应的也可以选择@nestjs/mercurius包</p><blockquote><p>focus on how to work with the built-in @nestjs/graphql module. The GraphQLModule can be configured to use Apollo server (with the @nestjs/apollo driver) and Mercurius (with the @nestjs/mercurius). We provide official integrations for these proven GraphQL packages to provide a simple way to use GraphQL with Nest (see more integrations here).</p></blockquote><h3 id="apollo" tabindex="-1"><a class="header-anchor" href="#apollo" aria-hidden="true">#</a> Apollo</h3><p>Apollo 是一组工具和社区成果，可帮助您在应用程序中使用 GraphQL。它以其客户端和服务器而闻名。</p>',8),f={href:"https://cloud.tencent.com/developer/article/1831513",target:"_blank",rel:"noopener noreferrer"},g={href:"https://juejin.cn/book/7226988578700525605/section/7238472356557570103",target:"_blank",rel:"noopener noreferrer"},b=t('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>主要解决矛盾：服务端单一稳定与端的差异灵活诉求之间的矛盾</p><h3 id="端存在差异性" tabindex="-1"><a class="header-anchor" href="#端存在差异性" aria-hidden="true">#</a> 端存在差异性</h3><ol><li>场景数据源不一致。服务订单：app端需要所有类型的服务订单，小程序端只需要图文问诊的服务订单，</li><li>页面展示字段不一致。app需要展示4个字段，小程序只需要1个字段</li></ol><h3 id="架构一" tabindex="-1"><a class="header-anchor" href="#架构一" aria-hidden="true">#</a> 架构一</h3><figure><img src="'+i+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p>使用nestjs+graphql实现了一个graphql service，具体实现看服务端实现</p>',7),_={href:"https://www.51cto.com/article/712429.html",target:"_blank",rel:"noopener noreferrer"},y=t('<p>那么问题就来了：</p><h4 id="问题1-bff操作数据是请求后端接口-还是直接连接数据库" tabindex="-1"><a class="header-anchor" href="#问题1-bff操作数据是请求后端接口-还是直接连接数据库" aria-hidden="true">#</a> 问题1: BFF操作数据是请求后端接口，还是直接连接数据库</h4><p>如果请求后端接口，那么就会存在：GraphQL服务变成面向数据接口，而非面向数据网络</p><p>如果希望实践成面向数据网络，那么对现有RESTful API 的关联关系和设计需要重新评估和实践</p><blockquote><p>原本 RESTful API 的接口，只是挂载到 GraphQL 的 Query 或 Mutation 的根节点下，未作其它改动。这种实践模式，只能有限发挥 GraphQL 合并请求、裁剪数据集的作用。它仍然是面向数据接口，而非面向数据网络的。</p></blockquote><p>结论：</p><p>还是以restful api的方式请求后端接口，并且graphql实践不会涉及到历史接口，只会在新模块中实行。</p><p>要做到面向数据网络，对后端api的设计要求较高，所以需要从这个层面来把控。</p><h4 id="问题2-需不需要连接数据库" tabindex="-1"><a class="header-anchor" href="#问题2-需不需要连接数据库" aria-hidden="true">#</a> 问题2: 需不需要连接数据库</h4><p>参考：</p><blockquote><p>所有面向外部用户的 GraphQL 服务，我们会限制只能调用其他后端 API，以避免出现密集计算或者架构复杂的情况。只有面向内部用户的服务，才允许 GraphQL 服务直接访问数据库或者缓存。</p></blockquote><p>结论：</p><p>不需要，数据库的操作暂时不会放在其中。</p><h3 id="架构二" tabindex="-1"><a class="header-anchor" href="#架构二" aria-hidden="true">#</a> 架构二</h3>',14),x={href:"https://the-guild.dev/blog/state-of-graphql-gateways-in-2023",target:"_blank",rel:"noopener noreferrer"},w=t('<figure><img src="'+c+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><blockquote><p>A GraphQL gateway follows a workflow that adds functionality and acts as a proxy between the consumer and the actual GraphQL server(s) running the GraphQL schema(s)</p></blockquote><blockquote><p>The GraphQL server, on the other hand, implements the actual GraphQL schema and runs resolvers, dataloaders, and any other custom code required for fetching and connecting your data or entities.</p></blockquote><figure><img src="'+u+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><figure><img src="'+d+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h3 id="问题1-需不需要graphql-getaway" tabindex="-1"><a class="header-anchor" href="#问题1-需不需要graphql-getaway" aria-hidden="true">#</a> 问题1: 需不需要GraphQL getaway</h3><p>需要：技术选型和demo实现？</p>',7),L={href:"https://docs.nestjs.com/graphql/federation",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.apollographql.com/docs/router",target:"_blank",rel:"noopener noreferrer"},A=t('<p>结论：</p><p>目前来看如果是以前端bff来实现，还是需要GraphQL getaway的。至于哪种方式实现，需要进一步确认。</p><h3 id="问题2-前端bff需不需要实现resolvers" tabindex="-1"><a class="header-anchor" href="#问题2-前端bff需不需要实现resolvers" aria-hidden="true">#</a> 问题2: 前端BFF需不需要实现resolvers</h3><p>如果实现了，那么BFF其实就是个graphQl service？</p><p>如果不实现，那么BFF该做的东西又是什么？</p><p>结论：</p><p>现在来看，这个resolvers的工作其实还是在bff，了解到不用实现resolvers的方式可以用apollo router去实现gateway，需要进一步确认。</p><h3 id="问题3-apollo去集成客户端和服务端" tabindex="-1"><a class="header-anchor" href="#问题3-apollo去集成客户端和服务端" aria-hidden="true">#</a> 问题3: apollo去集成客户端和服务端？</h3><p>如果我们都是使用apollo去集成客户端和服务端，</p><p>同时BFF不实现resolvers</p><p>那BFF要做的东西是什么？好像什么都不用做？</p><p>结论：</p><p>目前的demo是基于apollo去做的，应该也是较成熟和广泛的方案。</p><h3 id="架构三" tabindex="-1"><a class="header-anchor" href="#架构三" aria-hidden="true">#</a> 架构三</h3>',14),G={href:"https://tech.meituan.com/2021/05/06/bff-graphql.html",target:"_blank",rel:"noopener noreferrer"},Q=t('<figure><img src="'+h+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p>这是后端BFF的实现架构</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><h3 id="客户端接入" tabindex="-1"><a class="header-anchor" href="#客户端接入" aria-hidden="true">#</a> 客户端接入</h3>',4),j={href:"https://apollo.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},F=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
npm install <span class="token operator">--</span>save graphql graphql<span class="token operator">-</span>tag @apollo<span class="token operator">/</span>client

npm install <span class="token operator">--</span>save @vue<span class="token operator">/</span>apollo<span class="token operator">-</span>composable

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token comment">// graphql实例</span>
<span class="token keyword">const</span> httpLink <span class="token operator">=</span> <span class="token function">createHttpLink</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// You should use an absolute URL here</span>
  <span class="token literal-property property">uri</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:3000/graphql&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Cache implementation</span>
<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Create the apollo client</span>
<span class="token keyword">const</span> apolloClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">link</span><span class="token operator">:</span> httpLink<span class="token punctuation">,</span>
  cache
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">provide</span><span class="token punctuation">(</span>DefaultApolloClient<span class="token punctuation">,</span> apolloClient<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务端实现" tabindex="-1"><a class="header-anchor" href="#服务端实现" aria-hidden="true">#</a> 服务端实现</h3>`,3),S={href:"https://github.com/nestjs/nest/tree/master/sample/",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>对于GraphQL的使用</p><p>两种模式：</p><ul><li>code first: 使用TypeScript装饰器和类来直接定义GraphQL类型</li><li>schema first: 显式定义GraphQL类型</li></ul><p>schema好处：<br> 显式的schema文件，更方便不同团队的参与。简单明了</p><h4 id="构建超图的federation模式" tabindex="-1"><a class="header-anchor" href="#构建超图的federation模式" aria-hidden="true">#</a> 构建超图的Federation模式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">imports</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    GraphQLModule<span class="token punctuation">.</span>forRoot<span class="token operator">&lt;</span>ApolloGatewayDriverConfig<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">driver</span><span class="token operator">:</span> ApolloGatewayDriver<span class="token punctuation">,</span>
      <span class="token literal-property property">gateway</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">supergraphSdl</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">IntrospectAndCompose</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">subgraphs</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:3000/graphql&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:3001/graphql&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">controllers</span><span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">providers</span><span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="阶段总结" tabindex="-1"><a class="header-anchor" href="#阶段总结" aria-hidden="true">#</a> 阶段总结</h2><p>参考图</p><figure><img src="`+k+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p>思考问题： 单个BFF还是多个BFF需要进一步明确?多个bff的架构及实现又该是怎样</p><ul><li><p>学习成本/人力成本</p><p>例如：后端服务构造完业务数据关系后，需要转化为对应的图关系，BFF需要应用这层图关系并且实现resolvers，然后在clien端再去联调</p></li><li><p>编码质量/子图设计/性能 等问题如何保证</p></li></ul>',11);function C(N,I){const n=o("ExternalLinkIcon");return r(),l("div",null,[m,a("p",null,[a("a",f,[s("前端开发使用GraphQL——服务端技术选型"),e(n)])]),a("p",null,[a("a",g,[s("5个Nest心动理由"),e(n)])]),b,a("p",null,[a("a",_,[s("携程基于 GraphQL 的前端 BFF 服务开发实践"),e(n)])]),y,a("p",null,[a("a",x,[s("State of GraphQL Gateways in 2023"),e(n)])]),w,a("ul",null,[a("li",null,[a("p",null,[a("a",L,[s("nestjs+graphql的联邦实现"),e(n)])])]),a("li",null,[a("p",null,[a("a",q,[s("Apollo Router的应用"),e(n)])])])]),A,a("p",null,[a("a",G,[s("GraphQL及元数据驱动架构在后端BFF中的实践"),e(n)])]),Q,a("p",null,[a("a",j,[s("Vue Apollo"),e(n)])]),F,a("p",null,[a("a",S,[s("nestjs的示例代码"),e(n)])]),B])}const T=p(v,[["render",C],["__file","GraphQL.html.vue"]]);export{T as default};
