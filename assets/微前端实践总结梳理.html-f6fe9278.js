import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as h,o as l,c as t,a as e,b as a,e as i,d as n}from"./app-d57184dc.js";const d={},s=n('<h2 id="使用微前端的背景" tabindex="-1"><a class="header-anchor" href="#使用微前端的背景" aria-hidden="true">#</a> 使用微前端的背景</h2><p>随着公司业务发展，对患者也好，对医院也好，运营层面需要越来越多的手段去展开工作。对应的就是需要越来越多的管理后台去承载这些工作。</p><h3 id="问题一" tabindex="-1"><a class="header-anchor" href="#问题一" aria-hidden="true">#</a> 问题一</h3><p>每一个业务后台需要一个账号，对使用者来说增加的就是人力成本和管理成本；对研发来说，增加的就是研发成本。</p><h3 id="问题二" tabindex="-1"><a class="header-anchor" href="#问题二" aria-hidden="true">#</a> 问题二</h3><p>除了基于一条业务线去划分一个管理后台，会造成管理后台数量的增多。一些小的运营模块也需要有一两个页面去承载，比如活动/财务/售后，如果不断将这些小模块集成到已有的管理后台工程中，可预见的就是不断臃肿的巨石应用的应运而生。</p><p><strong>基于以上两个问题的背景，拆分应用，独立部署，最小化开发，是我们期望解决的方向，微前端作为一种行业的解决方案，也就自然而然的被我们提上日程。</strong></p><h2 id="微前端选型" tabindex="-1"><a class="header-anchor" href="#微前端选型" aria-hidden="true">#</a> 微前端选型</h2><p>纵览微前端的实现方案，可以归纳为以下几种</p>',9),p={href:"https://single-spa.js.org/",target:"_blank",rel:"noopener noreferrer"},c={href:"https://qiankun.umijs.org/zh/guide",target:"_blank",rel:"noopener noreferrer"},_={href:"https://wujie-micro.github.io/doc/guide/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://micro-zoe.github.io/micro-app/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.garfishjs.org/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://tech.meituan.com/2020/02/27/meituan-waimai-micro-frontends-practice.html",target:"_blank",rel:"noopener noreferrer"},b=e("li",null,"模块联邦的形式（定制化）",-1),x=n('<p>选择那种，无非就是根据我们当前情况，做出最优解。</p><h3 id="第一步" tabindex="-1"><a class="header-anchor" href="#第一步" aria-hidden="true">#</a> 第一步</h3><p>首先，基于人力成本和技术积累的角度来说，排除舍弃了定制化的方向。如果采用6，7的这种方案，好处不用说，完全贴合当前前端架构，但短期内无法解决的问题就是：</p><ol><li><p>我们的前端人力不太够，不能在这方面投入更多的精力</p></li><li><p>我们前端团队的技能积累还支撑不了，遇到卡点问题的快速解决能力</p></li></ol><h3 id="第二步" tabindex="-1"><a class="header-anchor" href="#第二步" aria-hidden="true">#</a> 第二步</h3><p>接下来我们就是看一些框架的选择。主要是从以下几个维度去打分</p><ol><li><p>接入学习成本</p><p>接入学习成本，决定了我们会在这个事情上的投入产出时间。这点需要我们去看官方文档</p></li><li><p>对当前我们已有前端工程的友好度</p><p>对已有工程的友好度，决定了我们的兼容成本和能否解决我们的问题，这点需要我们剖析当前架构和了解框架的实现原理</p></li><li><p>社区的活跃度</p><p>社区的活跃度，决定了我们遇到问题时的解决手段是否多</p></li></ol><p>基于以上三个大点的结论，基本能引导我们该使用那种框架。<br> 最后我们选择了micro-app</p><ol><li>组件形式接入，心智负担小</li><li>基于类webcomponents+iframe实现</li><li>社区活跃</li></ol><h2 id="微前端架构设计" tabindex="-1"><a class="header-anchor" href="#微前端架构设计" aria-hidden="true">#</a> 微前端架构设计</h2><p>选定框架后，要做的就是落地到我们的业务形态中。不同的公司实际情况肯定不一致，我们根据以下几点去思考方案，基本能覆盖成功落地的点。</p><h3 id="代码仓库的管理" tabindex="-1"><a class="header-anchor" href="#代码仓库的管理" aria-hidden="true">#</a> 代码仓库的管理</h3><p>这里我们需要考虑的是如何管理各个父子应用,有以下几种途径</p><ol><li>Submodules</li><li>monorepo</li><li>维持现状，独立工程</li></ol><h3 id="本地开发调试" tabindex="-1"><a class="header-anchor" href="#本地开发调试" aria-hidden="true">#</a> 本地开发调试</h3><p>这里我们需要考虑，开发人员如何快速便捷的本地开发调试</p><h3 id="部署方案" tabindex="-1"><a class="header-anchor" href="#部署方案" aria-hidden="true">#</a> 部署方案</h3><p>这里我们需要考虑，如何接入CICD，保证父子应用的更新</p><h3 id="监控方案" tabindex="-1"><a class="header-anchor" href="#监控方案" aria-hidden="true">#</a> 监控方案</h3><p>这里我们需要考虑，如何快速定位问题</p><h2 id="落地过程中遇到的问题" tabindex="-1"><a class="header-anchor" href="#落地过程中遇到的问题" aria-hidden="true">#</a> 落地过程中遇到的问题</h2><p>主要是一些兼容隔离的问题，例如</p><ol><li>样式没有做到全隔离</li><li>富文本编辑器的问题</li></ol><h2 id="目前还存在的问题" tabindex="-1"><a class="header-anchor" href="#目前还存在的问题" aria-hidden="true">#</a> 目前还存在的问题</h2><ol><li>本地开发调试还需要进一步优化，降低心智负担。</li></ol>',25);function g(k,w){const r=h("ExternalLinkIcon");return l(),t("div",null,[s,e("ol",null,[e("li",null,[e("a",p,[a("single-spa"),i(r)])]),e("li",null,[a("阿里"),e("a",c,[a("qiankun"),i(r)])]),e("li",null,[a("腾讯"),e("a",_,[a("wujie"),i(r)])]),e("li",null,[a("京东"),e("a",u,[a("micro-app"),i(r)])]),e("li",null,[a("字节"),e("a",f,[a("Garfish"),i(r)])]),e("li",null,[a("根据公司自身情况，自己设计的微前端方案（"),e("a",m,[a("微前端在美团外卖的实践"),i(r)]),a("）")]),b]),x])}const V=o(d,[["render",g],["__file","微前端实践总结梳理.html.vue"]]);export{V as default};
