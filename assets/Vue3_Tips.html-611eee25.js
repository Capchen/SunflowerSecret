import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as p,b as s,d as e,e as l,a as i}from"./app-449bb4de.js";const d={},u={href:"https://v3.cn.vuejs.org/guide/reactivity-fundamentals.html#%E5%93%8D%E5%BA%94%E5%BC%8F%E7%8A%B6%E6%80%81%E8%A7%A3%E6%9E%84",target:"_blank",rel:"noopener noreferrer"};function c(f,n){const a=o("ExternalLinkIcon");return r(),p("div",null,[n[7]||(n[7]=s("h3",{id:"ref-toref-torefs",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#ref-toref-torefs","aria-hidden":"true"},"#"),e(" ref/toRef/toRefs")],-1)),s("p",null,[n[1]||(n[1]=e("因为 props 是响应式的，你")),n[2]||(n[2]=s("strong",null,"不能使用 ES6 解构",-1)),n[3]||(n[3]=e("，它会消除 prop 的响应性")),n[4]||(n[4]=s("br",null,null,-1)),n[5]||(n[5]=e(" 如果需要解构 prop，可以在 setup 函数中使用 ")),s("a",u,[n[0]||(n[0]=e("toRefs")),l(a)]),n[6]||(n[6]=e(" 函数来完成。"))]),n[8]||(n[8]=i(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是当name属性是可选属性的时候，<code>toRefs</code>就失效了。此时需要使用toRef</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3))])}const k=t(d,[["render",c],["__file","Vue3_Tips.html.vue"]]);export{k as default};
