import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as l,c as p,a as i,b as a,d as r,e as n}from"./app-14dc0570.js";const s={},u={href:"https://webpack.js.org/",target:"_blank",rel:"noopener noreferrer"},c={href:"https://vue-loader.vuejs.org/zh/spec.html",target:"_blank",rel:"noopener noreferrer"},h={href:"http://cn.vuejs.org/",target:"_blank",rel:"noopener noreferrer"};function g(b,e){const o=d("ExternalLinkIcon");return l(),p("div",null,[e[8]||(e[8]=i('<h2 id="了解概念" tabindex="-1"><a class="header-anchor" href="#了解概念" aria-hidden="true">#</a> 了解概念</h2><p>vue是一个构建用户界面的渐进式框架 <br> vue-cli 是vue项目的脚手架工具<br> node是服务器上的JavaScript运行环境，可以理解为 Node = JavaScript+ 操作系统API<br> npm是包管理器，是 Node.js 平台的默认包管理工具，（yarn）<br> webpack 是一个静态模块打包器 （gulp grunt）</p><p>首先简单回顾上节课我们用vue开发的流程是怎样：</p><ol><li>先写好html文件</li><li>引入vue.js</li><li>然后挂载在DOM节点上，然后编写</li></ol><p>还记得这张图吗<br><img src="https://cdn.nlark.com/yuque/0/2019/png/297368/1556422147564-e90c91a7-5aa9-4d21-ba44-008774f99529.png#align=left&amp;display=inline&amp;height=217&amp;originHeight=217&amp;originWidth=568&amp;status=done&amp;width=568" alt="" loading="lazy"><br> 一个页面可以看成是各个组件组装而成。<br> 但是随着项目代码量越来越多，不可能所有的代码都是：</p><blockquote><p>使用 <code>Vue.component</code> 来定义全局组件，紧接着用 <code>new Vue({ el: &#39;#container &#39;})</code> 在每个页面内指定一个容器元素。</p></blockquote><p>这样就会造成</p><ol><li>组件名定义不能重复</li><li>字符串模板没有高亮提示</li><li>css写入麻烦</li><li>没有构建步骤</li></ol><p>所以vue就提供了单文件模板，一个以<code>.vue</code> 为后缀的文件，在这个文件里面html ，css，js分离，就像这样：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/297368/1556433959745-2664f7d4-31c9-4ae4-87e9-d56504ba242c.png#align=left&amp;display=inline&amp;height=256&amp;name=image.png&amp;originHeight=256&amp;originWidth=366&amp;size=13730&amp;status=done&amp;width=366" alt="image.png" loading="lazy"></p><p>并且我们还可以针对html使用类似<strong>Pug</strong>的模板引擎，针对js使用<strong>Babel</strong>或<strong>Ty****peScript</strong>预处理器，针对css使用<strong>stylus</strong>或者<strong>lass</strong>的预处理器,来提升我们的开发效率,但问题又来了，浏览器并不认识后缀为vue的文件，该怎么办呢？</p><h4 id="vue-loader" tabindex="-1"><a class="header-anchor" href="#vue-loader" aria-hidden="true">#</a> Vue Loader</h4><p>但这一切都离不开Vue Loader，我们之所以能使用单文件模板，是因为Vue Loader的存在，Vue Loader是什么？</p>',12)),a("blockquote",null,[a("p",null,[e[2]||(e[2]=r("Vue Loader 是一个 ")),a("a",u,[e[0]||(e[0]=r("webpack")),n(o)]),e[3]||(e[3]=r(" 的 loader，它允许你以一种名为")),a("a",c,[e[1]||(e[1]=r("单文件组件 (SFCs)")),n(o)]),e[4]||(e[4]=r("的格式撰写 Vue 组件"))])]),e[9]||(e[9]=i('<p>所以这就涉及到 <code> Webpack</code> 了</p><h4 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> Webpack</h4><blockquote><p>webpack 是一个模块打包器。它的主要目标是将 JavaScript 文件打包在一起，打包后的文件用于在浏览器中使用，但它也能够胜任转换(transform)、打包(bundle)或包裹(package)任何资源(resource or asset)。</p></blockquote><p>而loader又是干啥用的？</p><blockquote><p>loader 用于对模块的源代码进行转换。loader 可以使你在 <code>import</code> 或&quot;加载&quot;模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 <code>import</code> CSS文件！</p></blockquote><p>简单的说：浏览器并不认识后缀为 <code>.vue</code> 的单文件组件，那我们就需要把它转化为浏览器认识的js，HTML、css的文件，而Vue Loader 就是来干这个的<br> 所以，你想使用单文件模板，就一定要使用Vue Loader，要使用Vue Loader 就一定要基于webpack，那么就一定要配置webpack<br> 如何配置那又是另外一回事了。好在Vue提供了官方脚手架:Vue Cli 它帮助我们省去了webpack的相关配置，让我们直接使用单文件组件开发并且还提供了更多功能。</p><h4 id="node" tabindex="-1"><a class="header-anchor" href="#node" aria-hidden="true">#</a> Node</h4><p>要知道，Vue Cli 也是基于Node开发的。一切都离不开Node环境。</p><h2 id="介绍vue-cli" tabindex="-1"><a class="header-anchor" href="#介绍vue-cli" aria-hidden="true">#</a> 介绍Vue Cli</h2><p>它是一个终端运行的程序，目的是为了快速构建vue的开发环境。这个程序包含了三个主要部分<br> 一、Cli    它是一个全局npm包，提供了终端里面的命令<br> 二、Cli 服务    也是个npm包，不过安装在每个项目里面，是构建于webpack-dev-server上的<br> 三、CLI 插件    可供选择的各种npm包</p><h2 id="使用vue-cli" tabindex="-1"><a class="header-anchor" href="#使用vue-cli" aria-hidden="true">#</a> 使用Vue Cli</h2><p>Vue Cli现在的最新的版本是3.x，而我们公司有些项目还是使用老版本构建的<br> 我们会以最新的3.x的版本来操作，期间对比下老版本的工程目录</p><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h4><h4 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h4><p><code>vue create hello-world</code></p><figure><img src="https://cdn.nlark.com/yuque/0/2019/png/297368/1557198250674-8ed61802-ba37-4d8b-84b3-0266f1888163.png#align=left&amp;display=inline&amp;height=254&amp;name=image.png&amp;originHeight=254&amp;originWidth=390&amp;size=9721&amp;status=done&amp;width=390" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>也可以使用 <code>vue ui</code> 命令来使用图形化界面创建项目<br> 看创建好的目录</p><h4 id="开发" tabindex="-1"><a class="header-anchor" href="#开发" aria-hidden="true">#</a> 开发</h4><p>Axios</p><blockquote><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中</p></blockquote><p>Router</p>',21)),a("blockquote",null,[a("p",null,[e[6]||(e[6]=r("Vue Router 是 ")),a("a",h,[e[5]||(e[5]=r("Vue.js")),n(o)]),e[7]||(e[7]=r(" 官方的路由管理器"))])]),e[10]||(e[10]=a("p",null,"Vuex",-1)),e[11]||(e[11]=a("blockquote",null,[a("p",null,[r("Vuex 是一个专为 Vue.js 应用程序开发的"),a("strong",null,"状态管理模式"),r("。它采用集中式存储管理应用的所有组件的状态")])],-1)),e[12]||(e[12]=a("h4",{id:"打包构建优化",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#打包构建优化","aria-hidden":"true"},"#"),r(" 打包构建优化")],-1)),e[13]||(e[13]=a("p",null,[a("code",null,"npm run build")],-1))])}const k=t(s,[["render",g],["__file","开发构建分享.html.vue"]]);export{k as default};
