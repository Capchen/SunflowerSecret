import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,a as t}from"./app-0211e320.js";const o={};function p(l,n){return a(),e("div",null,n[0]||(n[0]=[t(`<h1 id="所有权" tabindex="-1"><a class="header-anchor" href="#所有权" aria-hidden="true">#</a> 所有权</h1><p>所有权规则：</p><ol><li>Each value in Rust has an owner.</li><li>There can only be one owner at a time.</li><li>When the owner goes out of scope, the value will be dropped.</li></ol><h2 id="堆栈" tabindex="-1"><a class="header-anchor" href="#堆栈" aria-hidden="true">#</a> 堆栈</h2><ol><li>栈中的所有数据都必须占用已知且固定的大小</li><li>因为指向放入堆中数据的指针是已知的并且大小是固定的，你可以将该指针存储在栈上，不过当需要实际数据时，必须访问指针</li></ol><blockquote><p>跟踪哪部分代码正在使用堆上的哪些数据，最大限度的减少堆上的重复数据的数量，以及清理堆上不再使用的数据确保不会耗尽空间，这些问题正是所有权系统要处理的。</p></blockquote><h2 id="二次释放-double-free" tabindex="-1"><a class="header-anchor" href="#二次释放-double-free" aria-hidden="true">#</a> 二次释放 double free</h2><p>拿 JS 来类比理解，引用类型的复制操作，会让 S2 和 S1 指针指向同一个地址，如果离开作用域时，同时释放 S2 和 S1 就会导致对同一个地址，执行两次 drop</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{s1}, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么 rust 是怎么去处理的呢， 如果我们按照上面做了 S1 赋值给 S2 的操作，那么 rust 认为 S1 瞬间就没有意义了，会立马释放，如果后面再去使用 S1，就会报错。</p><p>相对于 JS，类比的就是浅拷贝。但在 rust 中没有所谓浅拷贝，这种写法称呼为移动 move。上面的例子可以解读为 s1 被 移动 到了 s2 中。</p><blockquote><p>如果要执行深拷贝，我们可以使用 String 实例的 clone 方法</p></blockquote><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,13)]))}const r=s(o,[["render",p],["__file","所有权.html.vue"]]);export{r as default};
