import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,a as p}from"./app-74fd215c.js";const t={};function c(o,n){return a(),e("div",null,n[0]||(n[0]=[p(`<p>类似于数组，但是值都是唯一的。<br><code>const a = new Set([1,2,3,3,4])</code></p><h5 id="set-内部判断两个值是否不同-使用的算法叫做-same-value-zero-equality" tabindex="-1"><a class="header-anchor" href="#set-内部判断两个值是否不同-使用的算法叫做-same-value-zero-equality" aria-hidden="true">#</a> Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”</h5><p>了解下各比较算法</p><p>1.比较熟悉的 == 和 ===，前者会在类型不相等时，依据规则进行类型转换。而后者则是不允许类型转化来比较。<br> 2. <code>Object.is()</code> 方法也是比较两者是否相等，它使用的是**SameValue算法。**与 == 和 ===的区别如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span> <span class="token comment">// false</span>
<span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token comment">// true</span>
<span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.我们Set内部使用的是**SameValueZero算法，**而它的不同之处</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>
<span class="token comment">// true</span>
a<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>
<span class="token comment">//  true</span>
a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>
<span class="token function">Set</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span>
a<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>
<span class="token comment">// true</span>
<span class="token comment">// 可以看到NaN在使用SameValueZero算法的时候NaN是相等的，这和SameValue表现一样，</span>
<span class="token comment">// 0和-0也认为他们是相等,这就和Object.is()的结论不一致，也就是和SameValue表现不一致</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：Set数据类型保证其值唯一不重复是依据SameValueZero算法实现</p>`,8)]))}const i=s(t,[["render",c],["__file","Set数据类型相关.html.vue"]]);export{i as default};
