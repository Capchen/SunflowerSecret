import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as s,c as h,b as i,d as r,e as t,a as n,f as d}from"./app-449bb4de.js";const u={},p={href:"https://tencent.github.io/tmagic-editor/docs/guide/",target:"_blank",rel:"noopener noreferrer"},c={href:"https://github.com/Tencent/tmagic-editor",target:"_blank",rel:"noopener noreferrer"},m={href:"https://tencent.github.io/tmagic-editor/playground/index.html#/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://tencent.github.io/tmagic-editor/docs/guide/tutorial/runtime.html#runtime%E4%B8%8Eeditor%E9%80%9A%E4%BF%A1",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/Tencent/tmagic-editor/releases",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/Tencent/tmagic-editor/issues/481",target:"_blank",rel:"noopener noreferrer"};function x(v,e){const a=l("ExternalLinkIcon");return s(),h("div",null,[e[15]||(e[15]=i("h1",{id:"tmagic-editor工具调研",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#tmagic-editor工具调研","aria-hidden":"true"},"#"),r(" Tmagic-Editor工具调研")],-1)),i("ul",null,[i("li",null,[i("a",p,[e[0]||(e[0]=r("文档地址")),t(a)])]),i("li",null,[i("a",c,[e[1]||(e[1]=r("Github源码地址")),t(a)])]),i("li",null,[i("a",m,[e[2]||(e[2]=r("线上体验地址")),t(a)])])]),e[16]||(e[16]=n('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>随着公司业务矩阵的扩展，加上内容团队的宣传活动需求等，未来可预见会有大量的重复工作需求。如何降低前端开发人力投入，如何快速响应内容团队的需求，就需要考虑是否有工具能满足我们的诉求。</p><h2 id="tmagic-editor" tabindex="-1"><a class="header-anchor" href="#tmagic-editor" aria-hidden="true">#</a> Tmagic-Editor</h2><p>腾讯开源的一款可视化搭建平台，定位是生成移动端H5页面。支持本地部署，自定义构建</p><h3 id="功能特性" tabindex="-1"><a class="header-anchor" href="#功能特性" aria-hidden="true">#</a> 功能特性</h3>',5)),d(" ![能力项](https://gyenno-test.oss-cn-beijing.aliyuncs.com/pub/miniprogram/demo-test/tmagic-editor-power.png) "),e[17]||(e[17]=n('<figure><img src="https://img-blog.csdnimg.cn/img_convert/ec7d52bbb2b07a0b79e3f6d1de7effeb.png" alt="概览" tabindex="0" loading="lazy"><figcaption>概览</figcaption></figure><h4 id="一、所见即所得" tabindex="-1"><a class="header-anchor" href="#一、所见即所得" aria-hidden="true">#</a> 一、所见即所得</h4><p>拖拽编辑方式，包含了【左面板，工具栏，工作区，右面板】这四个操作空间。</p><figure><img src="https://vfiles.gtimg.cn/vupload/20211009/083dfa1633771059332.png" alt="示例图片-1" tabindex="0" loading="lazy"><figcaption>示例图片-1</figcaption></figure><h4 id="二、二次开发的拓展能力" tabindex="-1"><a class="header-anchor" href="#二、二次开发的拓展能力" aria-hidden="true">#</a> 二、二次开发的拓展能力</h4><p>支持自定义组件、插件，自定义部署流程。</p><ul><li>编辑器使用vue3开发，组件支持以（vue3/vue2/react）的方式开发，接入成本相对较小。</li><li>可以通过插件实现类似登录，页面环境判断，请求拦截器等等功能。</li><li>可以接入公司的jenkins构建平台</li></ul><h4 id="三、支持组件联动的能力" tabindex="-1"><a class="header-anchor" href="#三、支持组件联动的能力" aria-hidden="true">#</a> 三、支持组件联动的能力</h4><p>支持组件通信、组件联动，允许页面内各组件提供丰富配置能力。</p><h4 id="四、支持多种布局" tabindex="-1"><a class="header-anchor" href="#四、支持多种布局" aria-hidden="true">#</a> 四、支持多种布局</h4><p>他有容器的概念，容器可以无限嵌套，支持流式布局和定位布局，丰富了布局方式。</p><h4 id="五、dsl源码" tabindex="-1"><a class="header-anchor" href="#五、dsl源码" aria-hidden="true">#</a> 五、DSL源码</h4><p>配置保存后生成的产物是DSL源码，可以直接编辑DSL源码去修改页面样式。</p><h4 id="六、提供tmagic-admin的管理后台" tabindex="-1"><a class="header-anchor" href="#六、提供tmagic-admin的管理后台" aria-hidden="true">#</a> 六、提供tmagic-admin的管理后台</h4><p>包含的功能有新建活动，版本管理，版本回退，一键发布等等，还可以自己扩充。</p><h3 id="技术实现" tabindex="-1"><a class="header-anchor" href="#技术实现" aria-hidden="true">#</a> 技术实现</h3><h4 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释" aria-hidden="true">#</a> 名词解释</h4><ul><li><p><code>runtime</code>: 承载项目页面的运行环境。（编辑器工作区是一个runtime，发布上线后用户访问的页面也是一个runtime）</p></li><li><p><code>packages</code>: 一些依赖包，包括了ui/cli/editor等</p></li><li><p><code>playground</code>: 是一个编辑器项目示例，使用了<code>package</code>和<code>runtime</code>内容的集成项目</p></li></ul><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h4><p>项目的核心是<code>packages/editor</code>中的编辑器，编辑器包括了：</p><ol><li><p>模拟器：居中位置的内容，模拟真实页面的展示内容</p></li><li><p>组件库：左侧的组件列表</p></li><li><p>组件树：树状结构展示组件层级</p></li><li><p>表单配置：右侧的配置项</p></li><li><p>DSL源码：通过工具栏的源码按钮生成</p></li></ol><p><strong>布局原理</strong><br> 上文说到有容器的概念，布局的关键就是将布局配置指定在容器上，对容器内的所有子组件生效。</p><p><strong>页面渲染原理</strong><br> 上文说到配置保存的产物是DSL源码，由这份源码通过UI渲染器去生成组件。DSL又是根据布局原理的方式去生成的，所以DSL也是树状结构，通过递归的方式去渲染。参考下面官方提供的图<br><img src="https://vfiles.gtimg.cn/vupload/20211009/f4d3031633778551251.png" alt="示例图片-2" loading="lazy"></p><p><strong>UI渲染器原理</strong><br> 上面说到页面渲染是通过DSL，经由UI渲染器，渲染成页面。UI渲染器是怎么知道他该渲染哪个组件？因为DSL中的type是唯一的，与组件type是映射关系。所以通过type匹配到对应组件，由vue的<code>component</code>组件去动态匹配。基于这个原理，就需要我们的type命名唯一。</p><p><strong>UI渲染器和runtime</strong><br> 因为工具想要做到渲染器和editor的解藕，所以渲染的工作不在编辑器，那么编辑器中的模拟器部分是如何模拟真实页面的展示内容的？先说上文对<code>runtime</code>的解释是：承载项目页面的运行环境。所以<code>runtime</code>和<code>UI渲染器</code>的关系就是：<code>runtime</code> 需要一个对应的 UI 来作为渲染器，这样<code>runtime</code>才能解析DSL。而编辑器中的模拟器是通过 <code>iframe</code> 渲染的,这个<code>iframe</code>就是runtime提供出来的</p><blockquote><p>@tmagic/ui 和 runtime 是配套出现的，runtime 必须基于 @tmagic/ui 才可以实现渲染。因为 @tmagic/ui 需要提供 runtime 所需要的渲染器,现在有vue/vue3/react。也可以自己实现其他前端框架的实现。</p></blockquote>',26)),i("p",null,[e[4]||(e[4]=i("strong",null,"runtime与editor通信",-1)),e[5]||(e[5]=i("br",null,null,-1)),e[6]||(e[6]=r(" 既然是")),e[7]||(e[7]=i("code",null,"ifrmae",-1)),e[8]||(e[8]=r("的方式，那么runtime和editor就需要通信。主要是通过editor注入到window的magic api来进行交互。这里需要注意的UI渲染器也会将页面dom同步给编辑器。")),e[9]||(e[9]=i("br",null,null,-1)),e[10]||(e[10]=r(" 详细参考官方文档")),i("a",g,[e[3]||(e[3]=r("runtime与editor通信")),t(a)])]),e[18]||(e[18]=n(`<p><strong>组件联动原理</strong><br> 以vue3组件为例，组件的事件绑定/分发，是在<code>packages/core</code>中实现。组件渲染时，会把组件声明的事件（注册组件的时候根据规则，配套会有一个<code>event.ts</code>文件，在这个文件中声明当前组件的事件相关内容。）提供给<code>core</code>，<code>useApp</code>这个方法就是干这个事的。在vue的实现中useApp是将整个vue实例都提供给了app，所以需要defineExport来定义vue instance上的方法。</p><p>简单可以理解为:把所有组件的事件都暴露给vue实例，所以事件名必须唯一（用命名空间区分），然后在需要联动的组件里面匹配触发</p><h3 id="生产构建" tabindex="-1"><a class="header-anchor" href="#生产构建" aria-hidden="true">#</a> 生产构建</h3><h4 id="第一步-构建生产环境使用的runtime" tabindex="-1"><a class="header-anchor" href="#第一步-构建生产环境使用的runtime" aria-hidden="true">#</a> 第一步： 构建生产环境使用的runtime</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
# 输出的dist是playground示例web，输出的publist是对应的runtime
npm run build:playground

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>page.html的使用：可以拷贝很多份，然后将dsl.js插入进去来使用(window.magicDSL=[])</li><li>playground.html的使用： 示例项目的runtime</li></ol><h4 id="第二步-将第一步的构建产物进行归档编号-存为版本" tabindex="-1"><a class="header-anchor" href="#第二步-将第一步的构建产物进行归档编号-存为版本" aria-hidden="true">#</a> 第二步： 将第一步的构建产物进行归档编号，存为版本</h4><h4 id="第三步-将page-html发布到指定位置-提供访问" tabindex="-1"><a class="header-anchor" href="#第三步-将page-html发布到指定位置-提供访问" aria-hidden="true">#</a> 第三步： 将page.html发布到指定位置，提供访问</h4><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h3><h4 id="静态h5页面" tabindex="-1"><a class="header-anchor" href="#静态h5页面" aria-hidden="true">#</a> 静态H5页面</h4><ul><li>官网demo</li><li>宣传页面</li></ul><h4 id="能抽象出来的固定业务流程" tabindex="-1"><a class="header-anchor" href="#能抽象出来的固定业务流程" aria-hidden="true">#</a> 能抽象出来的固定业务流程</h4><p>场景一： 用户点击领取礼包-&gt;弹出手机号，验证码-&gt;确认<br> 场景二： 匿名问卷页面，匿名投票页面</p><h3 id="不适用场景" tabindex="-1"><a class="header-anchor" href="#不适用场景" aria-hidden="true">#</a> 不适用场景</h3><h4 id="混合开发场景" tabindex="-1"><a class="header-anchor" href="#混合开发场景" aria-hidden="true">#</a> 混合开发场景</h4><p>场景一： app内嵌的购药页面，包含大量逻辑判断，方法调用<br> 场景二： 内嵌微信。需要调用微信能力的页面</p><h4 id="做一个完善的h5应用" tabindex="-1"><a class="header-anchor" href="#做一个完善的h5应用" aria-hidden="true">#</a> 做一个完善的h5应用</h4><p>完善的h5应用包括了用户体系，权限校验，复杂的页面跳转，全局状态管理等等。</p><h3 id="如果我们自己使用-还需要待完善的地方" tabindex="-1"><a class="header-anchor" href="#如果我们自己使用-还需要待完善的地方" aria-hidden="true">#</a> 如果我们自己使用，还需要待完善的地方</h3><ol><li>需要生产可用，需要花时间整合进入CI，并对管理后台做修改</li><li>自定义组件要额外开发</li><li>业务插件要额外开发</li><li>探究UI库的接入使用</li></ol><h3 id="历史版本" tabindex="-1"><a class="header-anchor" href="#历史版本" aria-hidden="true">#</a> 历史版本</h3>`,21)),i("p",null,[i("a",b,[e[11]||(e[11]=r("Github上的更新记录")),t(a)])]),d(" ![历史版本](https://gyenno-test.oss-cn-beijing.aliyuncs.com/pub/miniprogram/demo-test/tmagic-editor-history-release.png) "),e[19]||(e[19]=i("h3",{id:"未来特性",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#未来特性","aria-hidden":"true"},"#"),r(" 未来特性")],-1)),i("p",null,[e[13]||(e[13]=r("从")),i("a",f,[e[12]||(e[12]=r("Issues")),t(a)]),e[14]||(e[14]=r("和QQ群中了解到，动态数据源（api请求等）这个feature官方已经在讨论中，还处于设计阶段，估计会被官方支持。"))]),e[20]||(e[20]=i("p",null,"但是就算官方不支持，其实从上面的issues中也可以看出，自己可以编码实现这个功能。",-1)),e[21]||(e[21]=i("h3",{id:"社区支持",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#社区支持","aria-hidden":"true"},"#"),r(" 社区支持")],-1)),e[22]||(e[22]=i("ul",null,[i("li",null,"文档方面：更新较慢，有些模块的介绍文档还不全"),i("li",null,"PR相对较少，但合入速度很快"),i("li",null,"有官方qq群，每天都有人提问题，官方小助手回复消息也很快。")],-1))])}const I=o(u,[["render",x],["__file","tmagic-_editor工具调研.html.vue"]]);export{I as default};
